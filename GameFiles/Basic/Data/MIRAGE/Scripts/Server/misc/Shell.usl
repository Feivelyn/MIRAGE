class CShell inherit CShellBase

	export proc void Exit()
		//CGameWrap.Quit();
		//L CSrvWrap.LogInfo("Shell","Exit");
	endproc;

	export proc void TrafficTest(int p_iTime)
		new CTrafficTest(p_iTime);
		/*
		var CTrafficTestTimer m_xTrafficTimer;
		var CGameTimeSpan xTimeSpan=CGameTimeSpan.OneSecond()*p_iTime.ToReal();
		var int iTimerID=CTimeMgr.Get().CreateTimer(xTimeSpan,false);
		var ^CTimerObj pxTimerObj=CTimeMgr.Get().GetTimer(iTimerID);
		m_xTrafficTimer.Init(this,iTimerID);
		pxTimerObj^.Subscribe(^m_xTrafficTimer);
		//var CObjQuery xOQ;
		//xOQ.SetClass("CHTR");
		//var CObjList xChars;
		//xOQ.Execute(xChars);
		*/
	endproc;

	export proc void DumpPFData()
		CSrvWrap.GetPathfinder().DumpPFData();
	endproc;

	export proc void AiReloadScripts()
		CSrvWrap.AiReloadScripts();
	endproc;

	export proc void AiSetBehavior(int p_iPlayer,string p_sBehavior)
//		CMirageSrvMgr.Debug("p_iPlayer: "+p_iPlayer.ToString()+" "+p_sBehavior);
		CAiInterface.SetModuleBehavior(p_iPlayer,CAiInterface.AiModule_Control,p_sBehavior);
		//CAiInterface.SetModuleBehavior(p_iPlayer,dwModuleId,p_sBehavior);
	endproc;

	export proc void TestSeq()
		//CSrvWrap.StartSequence("D:/Urs/UrsRel/Main/Data/Base/Sequences/test.seq");
		var CSequenceInfo xSeqInfo;
		xSeqInfo.m_sSeqFile="Test.seq";
		CSrvWrap.StartSequence(xSeqInfo);
	endproc;
	
	export proc void DumpCurTask(string p_sObjName)
		var ^CGameObj pxObj=CSrvWrap.GetObjMgr()^.GetObjByName(p_sObjName);
		if(pxObj==null)then
		else
			var ^CFightingObj pxFO=cast<CFightingObj>(pxObj);
			if(pxFO==null)then
			else
				var string sTaskName=pxFO^.GetTaskMgr()^.GetCurTaskName();
			endif;
			
		endif;
	endproc;
	
	export proc void Timer(int p_iOwner)
		var ^CObjTime pxHQTimer=cast<CObjTime>(CSrvWrap.GetObjMgr()^.CreateObj("ObjTime",0));
		if(pxHQTimer!=null)then
			pxHQTimer^.SetID(p_iOwner);
			pxHQTimer^.SetOwner(p_iOwner);
			pxHQTimer^.SetIcon("headquater");
			pxHQTimer^.SetTooltip("Blah blah blah");
			var CGameTimeSpan xInterval=(CGameTimeSpan.OneSecond()*60.0f)*5.0;
			pxHQTimer^.Start(xInterval,false,true);
		endif;
	endproc;
	
	export proc void GenDataDump()
		var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
		var ^CLevelInfo pxLevelInfo=^(pxLevel^.GetLevelInfo());
		pxLevelInfo^.GetGenericData().Save("C:/GenData_Server.txt");
	endproc;
	
	export proc void DumpTriggerStates()
		CSrvWrap.GetTriggerMgr().DumpTriggerStates();
	endproc;
	
	export proc void SetDomOwner(int p_iOwner)
		var CObjQuery	xOQ;
		xOQ.SetType("DOFL");
		var CObjList xObjects;
		xOQ.Execute(xObjects);
		var int i,iC=xObjects.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CDominationFlag pxFlag=cast<CDominationFlag>(xObjects[i].GetObj());
			if(pxFlag!=null)then
				pxFlag^.ChangeDominationOwner(p_iOwner);
			endif;
		endfor;
		
	endproc;
	
	export proc void DumpStatisticData()
		var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
		if(pxLevel!=null)then
			var ^CStatisticMgr pxStatisticMgr=^(pxLevel^.GetStatisticMgr());
			pxStatisticMgr^.Dump();
		endif;		
	endproc;

endclass;


class CTrafficTest

	var CDieTimer	m_xDieTimer;
	var CObjList	m_xCharacters;
	var array vec3	m_avStartPositions;

	class CDieTimer inherit CEvtSink

		var int				m_iTimerID;
		var ^CTrafficTest	m_pxOwner;

		export proc void Init(^CTrafficTest p_pxOwner,int p_iTimerID)
			//L CSrvWrap.LogInfo("Shell","MyTimer: "+p_iTimerID.ToString());
			m_pxOwner=p_pxOwner;
			m_iTimerID=p_iTimerID;
		endproc;

		proc bool OnPush(ref CEvtPointer p_rxEP)
			CTimeMgr.Get().DeleteTimer(m_iTimerID);
			m_pxOwner^.Die();
			return true;
		endproc;
	endclass;


	export constructor(int p_iTime)
		var CGameTimeSpan xTimeSpan=CGameTimeSpan.OneSecond()*p_iTime.ToReal();
		var int iTimerID=CTimeMgr.Get().CreateTimer(xTimeSpan,false);
		var ^CTimerObj pxTimerObj=CTimeMgr.Get().GetTimer(iTimerID);
		m_xDieTimer.Init(this,iTimerID);
		pxTimerObj^.Subscribe(^m_xDieTimer);
		StartTest();
	endconstructor;

	export proc void Die()
		EndTest();
		delete this;
	endproc;

	proc void StartTest()
		var CObjQuery xOQ;
		xOQ.SetType("CHTR");
		xOQ.Execute(m_xCharacters);

		xOQ.Clear();
		xOQ.SetType("STON");
		var CObjList xStones;
		xOQ.Execute(xStones);
		var int i,iC=m_xCharacters.NumEntries();
		m_avStartPositions=iC;
		for(i=0)cond(i<iC)iter(i++)do
			var CObjHndl xWalk=m_xCharacters[i];
			var ^CCharacter pxChar=cast<CCharacter>(xWalk.GetObj());
			m_avStartPositions[i]=pxChar^.GetPos();
			xStones.SortDistance(pxChar^.GetPos());
			var CObjHndl xNearStone=xStones[0];
			pxChar^.Mine(xNearStone,false);
		endfor;

		CSrvWrap.SendGenericEvtToPlayer(0,"ResetMsgReport");
	endproc;

	proc void EndTest()
		//L CSrvWrap.LogInfo("Shell","CTrafficTest::EndTest()");
		var int i,iC=m_xCharacters.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var CObjHndl xWalk=m_xCharacters[i];
			var ^CCharacter pxChar=cast<CCharacter>(xWalk.GetObj());
			pxChar^.WalkToPos(m_avStartPositions[i],false);
		endfor;
		CSrvWrap.SendGenericEvtToPlayer(0,"DumpMsg");
	endproc;
endclass;