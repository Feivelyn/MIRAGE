class CBLDGConditionsMgr inherit CEvtSource
	
	static var ^CBLDGConditionsMgr ms_pxInst;
	var array CPlayerBuildings m_axPlayers;
	
	class CPlayerBuildings
		
		var array string m_asBuildingClasses;
		var array int m_aiInstances;
		
		export constructor()
		endconstructor;
		
		export destructor()
		enddestructor;
		
		export proc int AddEntry(string p_sClass)
			var int iIndex = m_asBuildingClasses.FindEntry(p_sClass);
			if(iIndex!=-1)then
				iIndex = ++m_aiInstances[iIndex];
			else
				m_asBuildingClasses.AddEntry(p_sClass);
				m_aiInstances.AddEntry(1);
				iIndex = 1;
			endif;
			return iIndex;
		endproc;
		
		export proc bool DeleteEntry(string p_sClass)
			var bool bAllDestroyed = false;
			var int iIndex = m_asBuildingClasses.FindEntry(p_sClass);
			if(iIndex!=-1)then
				m_aiInstances[iIndex]--;
				if(m_aiInstances[iIndex]<=0)then
					m_aiInstances.DeleteEntry(iIndex);
					m_asBuildingClasses.DeleteEntry(iIndex);
					bAllDestroyed = true;
				endif;
			else
				bAllDestroyed = true;
			endif;
			return bAllDestroyed;
		endproc;
		
		export proc bool HasEntry(string p_sClass)
			return NumEntries(p_sClass)>0;
		endproc;
		
		export proc int NumEntries(string p_sClass)
			var int iIdx = m_asBuildingClasses.FindEntry(p_sClass);
			if(iIdx>=0)then
				return m_aiInstances[iIdx];
			endif;
			return 0;
		endproc;
		
	endclass;
	
	constructor()
		m_axPlayers = 8;
	endconstructor;
	
	export static proc ref CBLDGConditionsMgr Get()
		if (ms_pxInst==null)then
			ms_pxInst=new CBLDGConditionsMgr;
		endif;
		return(ms_pxInst^);
	endproc;
	
	export static proc void Kill()
		if(ms_pxInst!=null)then
			delete ms_pxInst;
			ms_pxInst=null;
		endif;
	endproc;
	
	export proc int AddBuilding(^CGameObj p_pxObj)
		var int iOwner=p_pxObj^.GetOwner();
		var string sClass=p_pxObj^.GetClassName();
		if(iOwner==-1)then return 0; endif;
		var string sObjTribe = GetObjTribe(p_pxObj);
		var bool bBefore = m_axPlayers[iOwner].HasEntry(sClass);
		var int iCount = m_axPlayers[iOwner].AddEntry(sClass);
		var bool bAfter = iCount > 0;
		if(!bBefore && bAfter)then
			var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
			if(pxLevel!=null)then
				var ^CPlayer pxPlayer=pxLevel^.GetPlayer(iOwner);
				if(pxPlayer!=null)then
					var ^CBasePlayer pxBasePlayer = cast<CBasePlayer>(pxPlayer);
					if(pxBasePlayer!=null)then
						if(sObjTribe == "")then
							sObjTribe = pxBasePlayer^.m_sTribe;
						endif;
						pxPlayer^.GetPlayerTechTreeDef().EnableFilter("Filters/"+sObjTribe+"/BuildObjects/"+sClass);
					endif;
				endif;
			endif;
		endif;
		var CEvtPointer xEvt = CEvtPointer.CreateEvent("BLDGCHG");
		xEvt.SetInt(0, iOwner);
		Broadcast(xEvt);
		return iCount;
	endproc;
	
	export proc bool DeleteBuilding(^CGameObj p_pxObj)
		var int iOwner=p_pxObj^.GetOwner();
		var string sClass=p_pxObj^.GetClassName();
		if(iOwner==-1)then return false; endif;
		var string sObjTribe = GetObjTribe(p_pxObj);
		var bool bBefore = m_axPlayers[iOwner].HasEntry(sClass);
		var bool bAllDestroyed = m_axPlayers[iOwner].DeleteEntry(sClass);
		if(bBefore && bAllDestroyed)then
			var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
			if(pxLevel!=null)then
				var ^CPlayer pxPlayer=pxLevel^.GetPlayer(iOwner);
				if(pxPlayer!=null)then
					var ^CBasePlayer pxBasePlayer = cast<CBasePlayer>(pxPlayer);
					if(pxBasePlayer!=null)then
						if(sObjTribe == "")then
							sObjTribe = pxBasePlayer^.m_sTribe;
						endif;
						pxPlayer^.GetPlayerTechTreeDef().DisableFilter("Filters/"+sObjTribe+"/BuildObjects/"+sClass);
					endif;
				endif;
			endif;
		endif;
		var CEvtPointer xEvt = CEvtPointer.CreateEvent("BLDGCHG");
		xEvt.SetInt(0, iOwner);
		Broadcast(xEvt);
		return bAllDestroyed;
	endproc;
	
	export proc bool HasBuilding(int p_iOwner, string p_sClass)
		if(p_iOwner==-1)then return true; endif;
		return m_axPlayers[p_iOwner].HasEntry(p_sClass);
	endproc;
	
	export proc int NumBuildings(int p_iOwner, string p_sClass) 
		if(p_iOwner==-1)then return 0; endif;
		return m_axPlayers[p_iOwner].NumEntries(p_sClass);
	endproc;
	
	export proc string GetObjTribe(^CGameObj p_pxObj)
		var ^CAttribs pxAttr=p_pxObj^.GetAttribs();
		if(pxAttr!=null)then
			return pxAttr^.GetValue("tribe");
		endif;
		return "";
	endproc;
	
endclass;
	
class CBLDGMgr
	
	static var ^CBLDGMgr				ms_pxInst;
	var array CObjList					m_axBuildings;
	var array CBuildingClasses	m_axClasses;
	var ^CPropDB.CNode					m_pxTribes;
	
	class CBuildingClasses
		
		var array string m_asClasses;
		var array int m_aiQuantity;
		var array int m_aiRegistered;
		
		export constructor()
		endconstructor;
		
		export destructor()
		enddestructor;
		
		export proc int AddEntry(string p_sClass)
			var int iIndex = m_asClasses.FindEntry(p_sClass);
			if(iIndex!=-1)then
				iIndex = ++m_aiQuantity[iIndex];
			else
				m_asClasses.AddEntry(p_sClass);
				m_aiRegistered.AddEntry(0);
				m_aiQuantity.AddEntry(1);
				iIndex = 1;
			endif;
			return iIndex;
		endproc;
		
		export proc int DeleteEntry(string p_sClass)
			var int iRemain = 0;
			var int iIndex = m_asClasses.FindEntry(p_sClass);
			if(iIndex!=-1)then
				m_aiQuantity[iIndex]--;
				iRemain=m_aiQuantity[iIndex];
				if(m_aiQuantity[iIndex]<=0&&m_aiRegistered[iIndex]<=0)then
					m_aiQuantity.DeleteEntry(iIndex);
					m_aiRegistered.DeleteEntry(iIndex);
					m_asClasses.DeleteEntry(iIndex);
				endif;
			endif;
			return iRemain;
		endproc;
		
		export proc bool HasEntry(string p_sClass)
			return NumEntries(p_sClass)>0;
		endproc;
		
		export proc int NumEntries(string p_sClass)
			var int iIdx = m_asClasses.FindEntry(p_sClass);
			if(iIdx>=0)then
				return m_aiQuantity[iIdx];
			endif;
			return 0;
		endproc;
		
		export proc int NumRegistered(string p_sClass)
			var int iIdx = m_asClasses.FindEntry(p_sClass);
			if(iIdx>=0)then
				return m_aiRegistered[iIdx];
			endif;
			return 0;
		endproc;
		
		export proc int Register(string p_sClass)
			var int iIndex = m_asClasses.FindEntry(p_sClass);
			if(iIndex!=-1)then
				iIndex = ++m_aiRegistered[iIndex];
			else
				m_asClasses.AddEntry(p_sClass);
				m_aiRegistered.AddEntry(1);
				m_aiQuantity.AddEntry(0);
				iIndex = 1;
			endif;
			return iIndex;
		endproc;
		
		export proc int Unregister(string p_sClass)
			var int iRemain = 0;
			var int iIndex = m_asClasses.FindEntry(p_sClass);
			if(iIndex!=-1)then
				m_aiRegistered[iIndex]--;
				iRemain=m_aiRegistered[iIndex];
				if(m_aiRegistered[iIndex]<=0&&m_aiQuantity[iIndex]<=0)then
					m_aiRegistered.DeleteEntry(iIndex);
					m_aiQuantity.DeleteEntry(iIndex);
					m_asClasses.DeleteEntry(iIndex);
				endif;
			endif;
			return iRemain;
		endproc;
		
	endclass;
	
	constructor()
		m_axBuildings = 8;
		m_axClasses = 8;
		var ^CPropDB pxTribes=new CPropDB;
		if(pxTribes^.Load(CSrvWrap.GetUrsRelPath()+"/Data/Base/Scripts/Server/settings/BuildingList.txt"))then
			m_pxTribes=^((pxTribes^).GetRoot());
		endif;
	endconstructor;
	
	export static proc ref CBLDGMgr Get()
		if(ms_pxInst==null)then
			ms_pxInst=new CBLDGMgr;
		endif;
		return(ms_pxInst^);
	endproc;
	
	export static proc void Kill()
		if(ms_pxInst!=null)then
			delete ms_pxInst;
			ms_pxInst=null;
		endif;
	endproc;
	
	export proc void AddBuilding(^CGameObj p_pxObj)
		var int iOwner=p_pxObj^.GetOwner();
		if(iOwner<0 || iOwner>7)then return; endif;
		m_axBuildings[iOwner].Include(p_pxObj^.GetHandle());
	endproc;
	
	export proc void RemoveBuilding(^CGameObj p_pxObj)
		if(p_pxObj^.GetOwner()==-1)then return; endif;
		m_axBuildings[p_pxObj^.GetOwner()].RemEntry(p_pxObj^.GetHandle());
	endproc;
	
	export proc void GetAllBuildings(int p_iOwner, ref CObjList po_rxList)
		po_rxList.Clear();
		if(p_iOwner>=0 && p_iOwner<8)then
			po_rxList=m_axBuildings[p_iOwner];
		endif;
	endproc;
	
	export proc void InvalidateAllBuildlingTechTrees(int p_iOwner)
		var int i,iC=m_axBuildings[p_iOwner].NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CFightingObj pxObj=cast<CFightingObj>((m_axBuildings[p_iOwner])[i].GetObj());
			if(pxObj==null)then continue; endif;
			pxObj^.InvalidateTechTree();
		endfor;
	endproc;
	
	export proc bool HasBuilding(int p_iOwner, CObjHndl p_xHndl)
		return m_axBuildings[p_iOwner].FindEntry(p_xHndl)!=-1;
	endproc;
	
	export proc int AddClass(string p_sClass, string p_sTribe, int p_iOwner)
		return AddClass(p_sClass, p_sTribe, p_iOwner, false);
	endproc;
	
	export proc int AddClass(string p_sClass, string p_sTribe, int p_iOwner, bool p_bLoad)
		if(!CMirageSrvMgr.Get().BldgMaxCapacity())then return 0; endif;
		if(p_iOwner==-1)then return 0; endif;
		var ^CBasePlayer pxB=CBasePlayer.GetPlayer(p_iOwner);
		if(pxB==null)then return 0; endif;
		if(m_pxTribes!=null&&p_sClass!="")then
			p_sTribe=m_pxTribes^.GetValueS(p_sClass,"");
		endif;
		if(p_sTribe=="")then
			p_sTribe=pxB^.m_sTribe;
		endif;
		var ^CTechTree.CNode pxTT=pxB^.GetPlayerTechTree().FindNode("Objects/"+p_sTribe+"/BLDG/"+p_sClass);
		if(pxTT==null)then return 0; endif;
		var int iMax=pxTT^.GetSubValueI("max_quantity",-1);
//		if(iMax<0)then return 0; endif;
		var int iRemain = m_axClasses[p_iOwner].AddEntry(p_sClass);
		if(!p_bLoad)then
			UnregisterClass(p_sClass,p_sTribe,p_iOwner);
		endif;
		var ^CTechTreeDef pxDef=^(pxB^.GetPlayerTechTreeDef());
		if(pxDef==null)then return iRemain; endif;
		var string sF="Filters/"+p_sTribe+"/BuildingCount/"+p_sClass;
		if(iMax>=0 && iRemain>=iMax)then
			if(!pxDef^.HasFilter(sF))then
				pxDef^.EnableFilter(sF);
			endif;
		elseif(pxDef^.HasFilter(sF))then
			pxDef^.DisableFilter(sF);
		endif;
		return iRemain;
	endproc;
	
	export proc int RemoveClass(string p_sClass, string p_sTribe, int p_iOwner)
		if(!CMirageSrvMgr.Get().BldgMaxCapacity())then return 0; endif;
		if(p_iOwner==-1)then return 0; endif;
		var ^CBasePlayer pxB=CBasePlayer.GetPlayer(p_iOwner);
		if(pxB==null)then return 0; endif;
		if(m_pxTribes!=null&&p_sClass!="")then
			p_sTribe=m_pxTribes^.GetValueS(p_sClass,"");
		endif;
		if(p_sTribe=="")then
			p_sTribe=pxB^.m_sTribe;
		endif;
		var ^CTechTree.CNode pxTT=pxB^.GetPlayerTechTree().FindNode("Objects/"+p_sTribe+"/BLDG/"+p_sClass);
		if(pxTT==null)then return 0; endif;
		var int iMax=pxTT^.GetSubValueI("max_quantity",-1);
//		if(iMax<0)then return 0; endif;
		var int iRemain = m_axClasses[p_iOwner].DeleteEntry(p_sClass);
		var ^CTechTreeDef pxDef=^(pxB^.GetPlayerTechTreeDef());
		if(pxDef==null)then return iRemain; endif;
		var string sF="Filters/"+p_sTribe+"/BuildingCount/"+p_sClass;
		if(iRemain<iMax)then
			if(pxDef^.HasFilter(sF))then
				pxDef^.DisableFilter(sF);
			endif;
		elseif(!pxDef^.HasFilter(sF) && iMax>=0)then
			pxDef^.EnableFilter(sF);
		endif;
		return iRemain;
	endproc;
	
	export proc bool HasClass(int p_iOwner, string p_sClass)
		if(p_iOwner==-1)then return true; endif;
		return m_axClasses[p_iOwner].HasEntry(p_sClass);
	endproc;
	
	export proc int NumClasses(int p_iOwner, string p_sClass) 
		if(p_iOwner==-1)then return 0; endif;
		return m_axClasses[p_iOwner].NumEntries(p_sClass);
	endproc;
	
	export proc bool CanAddBuilding(int p_iOwner, string p_sTribe, string p_sClass)
		if(!CMirageSrvMgr.Get().BldgMaxCapacity())then return true; endif;
		if(p_iOwner==-1)then return true; endif;
		if(p_iOwner<0||p_iOwner>7)then return false; endif;
		var ^CBasePlayer pxB=CBasePlayer.GetPlayer(p_iOwner);
		if(pxB==null)then return false; endif;
		if(m_pxTribes!=null&&p_sClass!="")then
			p_sTribe=m_pxTribes^.GetValueS(p_sClass,p_sTribe);
		endif;
		var ^CTechTree.CNode pxTT=pxB^.GetPlayerTechTree().FindNode("Objects/"+p_sTribe+"/BLDG/"+p_sClass);
		if(pxTT==null)then return false; endif;
		var int iMax=pxTT^.GetSubValueI("max_quantity",-1);
		if(iMax<0)then return true; endif;
		var bool bReturn = (m_axClasses[p_iOwner].NumEntries(p_sClass)+m_axClasses[p_iOwner].NumRegistered(p_sClass)+1)<=iMax;
		if(bReturn)then
			RegisterClass(p_sClass,p_sTribe,p_iOwner);
		endif;
		return bReturn;
	endproc;
	
	export proc int RegisterClass(string p_sClass, string p_sTribe, int p_iOwner)
		if(!CMirageSrvMgr.Get().BldgMaxCapacity())then return 0; endif;
		if(p_iOwner==-1)then return 0; endif;
		var ^CBasePlayer pxB=CBasePlayer.GetPlayer(p_iOwner);
		if(pxB==null)then return 0; endif;
		if(m_pxTribes!=null&&p_sClass!="")then
			p_sTribe=m_pxTribes^.GetValueS(p_sClass,"");
		endif;
		if(p_sTribe=="")then
			p_sTribe=pxB^.m_sTribe;
		endif;
		var ^CTechTree.CNode pxTT=pxB^.GetPlayerTechTree().FindNode("Objects/"+p_sTribe+"/BLDG/"+p_sClass);
		if(pxTT==null)then return 0; endif;
		var int iMax=pxTT^.GetSubValueI("max_quantity",-1);
		var int iRemain = m_axClasses[p_iOwner].Register(p_sClass);
		return iRemain;
	endproc;
	
	export proc int UnregisterClass(string p_sClass, string p_sTribe, int p_iOwner)
		if(!CMirageSrvMgr.Get().BldgMaxCapacity())then return 0; endif;
		if(p_iOwner==-1)then return 0; endif;
		var ^CBasePlayer pxB=CBasePlayer.GetPlayer(p_iOwner);
		if(pxB==null)then return 0; endif;
		if(m_pxTribes!=null&&p_sClass!="")then
			p_sTribe=m_pxTribes^.GetValueS(p_sClass,"");
		endif;
		if(p_sTribe=="")then
			p_sTribe=pxB^.m_sTribe;
		endif;
		var ^CTechTree.CNode pxTT=pxB^.GetPlayerTechTree().FindNode("Objects/"+p_sTribe+"/BLDG/"+p_sClass);
		if(pxTT==null)then return 0; endif;
		var int iMax=pxTT^.GetSubValueI("max_quantity",-1);
		var int iRemain = m_axClasses[p_iOwner].Unregister(p_sClass);
		return iRemain;
	endproc;
	
endclass;

