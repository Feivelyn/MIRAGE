class CFinishingMoveMgr
	//private
	static var ^CFinishingMoveMgr			ms_pxInst;
	var array string									m_asMoves;
	var array CMoveDef								m_axMoves;
//	var array CFighterDef							m_axFighters;
	var array CGroupDef								m_axGroups;

	// public interface
	export static proc ref CFinishingMoveMgr Get()
		if(ms_pxInst==null)then
			ms_pxInst=new CFinishingMoveMgr();
		endif;
		return ms_pxInst^;
	endproc;
	
	export static proc void ShutStatic()
		delete ms_pxInst;
	endproc;
	
//	export proc int FindFighter(string p_sName)
//		var CFighterDef xFind;
//		xFind.m_sName=p_sName;
//		var int iIdx=m_axFighters.BinarySearch(xFind);
//		return iIdx;
//	endproc;
	
	export proc ^CFinishingMoveMgr.CMoveDef FindMove(string p_sExecutor, string p_sVictim, string p_sFighter, string p_sEnemy)
		var string sMove = p_sExecutor+"_vs_"+p_sVictim;
		if(p_sFighter=="Cole_s0" && p_sVictim=="Infantry_all" && Random.GetInt()%2==1)then
			sMove = "Cole_vs_Infantry_all";
		endif;
		var int iIndex = m_asMoves.FindEntry(sMove);
		if(iIndex == -1)then
			if(p_sFighter=="darwin_s0")then
				sMove = "Darwin_vs_"+p_sVictim;
				iIndex = m_asMoves.FindEntry(sMove);
			elseif(p_sFighter=="hermit_s0")then
				sMove = "Hermit_vs_"+p_sVictim;
				iIndex = m_asMoves.FindEntry(sMove);
			endif;
		endif;
		if(iIndex == -1 || m_axMoves.NumEntries()<iIndex)then
			return null;
		endif;
		return ^(m_axMoves[iIndex]);
	endproc;

	//classes
	class CMoveDef
		
		export const bitset								DELETE_CORPSE = 00002h;
		export var array string						m_asFighters;
		export var array string						m_asEnemies;
		export var array CAnims						m_axAnims;
		export var real										m_fLinkDelay;
		export var CFourCC								m_xLink;
		export var bool										m_bInstantDelete;
		export var array CBodyPart				m_axBodyParts;
		export var bitset									m_dwFlags;
		
		export proc void GetRandomAnim(ref string po_rsFighter,ref string po_rsEnemy)
			var int iIdx=Random.MTRandI()%m_axAnims.NumEntries();
			if(m_axAnims.NumEntries()==0)then
				return;
			endif;
			po_rsFighter=m_axAnims[iIdx].m_sFighter;
			po_rsEnemy=m_axAnims[iIdx].m_sEnemy;
		endproc;
		
		export proc bool ParticipantsCheck(string p_sFighter, string p_sEnemy)
			return (m_asFighters.FindEntry(p_sFighter)!=-1 && m_asEnemies.FindEntry(p_sEnemy)!=-1);
		endproc;
		
		class CAnims
		
			export var string m_sFighter;
			export var string m_sEnemy;
			
			export proc void Set(string p_sFighter,string p_sEnemy)
				m_sFighter = p_sFighter;
				m_sEnemy = p_sEnemy;
			endproc;
			
			export proc void DoKArc(ref CArc p_rxArc)
				p_rxArc << m_sFighter;
				p_rxArc << m_sEnemy;
			endproc;
			
		endclass
		
		class CBodyPart
			
			export var string				m_sName;
			export var CFourCC			m_xLink;
			export var real					m_fTimer;
			
		endclass;
		
		export proc void DoKArc(ref CArc p_rxArc)
			p_rxArc << m_xLink;
			p_rxArc << m_fLinkDelay;
			p_rxArc << m_bInstantDelete;
			
			var int i,iC;
			
			iC=m_asEnemies.NumEntries();
			p_rxArc << iC;
			m_asEnemies=iC;
			for(i=0) cond(i<iC) iter(i++) do
				p_rxArc << m_asEnemies[i];
			endfor;

			iC=m_axAnims.NumEntries();
			p_rxArc << iC;
			m_axAnims=iC;
			for(i=0) cond(i<iC) iter(i++) do
				m_axAnims[i].DoKArc(p_rxArc);
			endfor;
			
			//if(p_rxArc.GetVersion()>=...) then
			//	... m_axBodyParts ... TODO add Bodyparts if necessary
			//endif;
		endproc;
	endclass;
	
	class CGroupDef
	
		export var string					m_sName;
		export var array string		m_asMembers;
		
	endclass;

	constructor()
		Init(CSrvWrap.GetUrsRelPath()+"/Data/Base/Scripts/Server/settings/FinishingMoves.txt");
	endconstructor;
	
	proc void InitGroups(^CPropDB.CNode p_pxGroups)
		var int i,iC=p_pxGroups^.NumSubs();
		for(i=0) cond(i<iC) iter(i++) do
			var ^CPropDB.CNode pxGroup=^((p_pxGroups^)[i]);
			var ^CGroupDef pxGroupDef=^(m_axGroups.NewEntryRef());
			pxGroupDef^.m_sName=pxGroup^.Name();
			pxGroup^.Value().Split(pxGroupDef^.m_asMembers,",",true);
		endfor;
	endproc;
	
	proc ^CFinishingMoveMgr.CGroupDef FindGroup(string p_sName)
		var int i,iC=m_axGroups.NumEntries();
		for(i=0) cond(i<iC) iter(i++) do
			if(m_axGroups[i].m_sName==p_sName) then
				return ^(m_axGroups[i]);
			endif;
		endfor;
		return null;
	endproc;
	
	export static proc void JoinStringArrays(ref array string po_rasA,ref array string p_rasB)
		var int i, iC = p_rasB.NumEntries(), iA = po_rasA.NumEntries();
		po_rasA += iC;
		for(i=0)cond(i<iC)iter(i++)do
//			if(po_rasA.FindEntry(p_rasB[i])!=-1)then continue; endif;
			po_rasA[iA+i] = p_rasB[i];
		endfor;
	endproc;
	
	proc void Init(string p_sFile)
		var CPropDB xDB;
		if(!xDB.Load(p_sFile)) then
			return;
		endif;
		var ^CPropDB.CNode pxRoot=^(xDB.GetRoot());
		var int i,iC=pxRoot^.NumSubs();
		for(i=0) cond(i<iC) iter(i++) do
			var ^CPropDB.CNode pxMove=^((pxRoot^)[i]);
			if(pxMove^.Name()=="Groups") then
				InitGroups(pxMove);
				continue;
			elseif((pxMove^.Name()).IsEmpty() || m_asMoves.FindEntry(pxMove^.Name())!=-1)then
				continue;
			endif;
			
			var string sFighters = pxMove^.GetValueS("Fighters");
			var string sEnemies = pxMove^.GetValueS("Enemies");
			var string sFighterAnims = pxMove^.GetValueS("FighterAnims");
			var string sEnemyAnims = pxMove^.GetValueS("EnemyAnims");
			var bool bInstantDelete = pxMove^.GetValueI("InstantDel",0)!=0;
			var CFourCC xLink = pxMove^.GetValueS("Link");
			var real fLinkDelay=pxMove^.GetValueR("LinkDelay");
			var bool bDelCorpse = pxMove^.GetValueI("DeleteCorpse",0)==1;
			var array CMoveDef.CBodyPart axBodyParts;
			var ^CPropDB.CNode pxBodyParts=pxMove^.Get("BodyParts");
			if(pxBodyParts!=null)then
				var int j, ijC = pxBodyParts^.NumSubs();
				for(j=0)cond(j<ijC)iter(j++)do
					var ^CPropDB.CNode pxNodeBP = ^((pxBodyParts^)[j]);
					var ^CMoveDef.CBodyPart pxBP = ^(axBodyParts.NewEntryRef());
					pxBP^.m_xLink = pxNodeBP^.Name();
					var string sBPV = pxNodeBP^.Value();
					var int iComma = sBPV.Find(',');
					if(iComma!=-1)then
						pxBP^.m_fTimer=sBPV.Mid(iComma+1).ToReal();
						sBPV.Delete(iComma,2147483647);
					endif;
					pxBP^.m_sName=sBPV;
				endfor;
			endif;
			
			var array string asFighters;
			sFighters.Split(asFighters,",",true);
			var array string asEnemies;
			sEnemies.Split(asEnemies,",",true);
			
			if(asFighters.NumEntries()==0) then
				continue;
			endif;
			if(asEnemies.NumEntries()==0) then
				continue;
			endif;

			var array string asAnimsFighter;
			sFighterAnims.Split(asAnimsFighter,",",true);
			var array string asAnimsEnemy;
			sEnemyAnims.Split(asAnimsEnemy,",",false); //reaction anims can be empty
			if(asAnimsFighter.NumEntries()==0) then
				continue;
			endif;
			if(asAnimsEnemy.NumEntries()==0) then
				continue;
			endif;
			if(asAnimsFighter.NumEntries()!=asAnimsEnemy.NumEntries())then
				continue;
			endif;
			var array CMoveDef.CAnims axAnims;
			var int j,ijC=asAnimsFighter.NumEntries();
			axAnims=ijC;
			for(j=0) cond(j<ijC) iter(j++) do
				axAnims[j].Set(asAnimsFighter[j],asAnimsEnemy[j]);
			endfor;

			ijC = asFighters.NumEntries();
			for(j=0)cond(j<ijC)iter(++j) do
				if(asFighters[j].Left(1)=="$") then
					var string sGroup = asFighters[j].Mid(1);
					asFighters.DeleteEntry(j--);--ijC;
					var ^CGroupDef pxGroupDef=FindGroup(sGroup);
					if(pxGroupDef!=null)then
						JoinStringArrays(asFighters,pxGroupDef^.m_asMembers);
					endif;
				endif;
			endfor;

			ijC = asEnemies.NumEntries();
			for(j=0)cond(j<ijC)iter(++j)do
				if(asEnemies[j].Left(1)=="$")then
					var string sGroup=asEnemies[j].Mid(1);
					asEnemies.DeleteEntry(j--);--ijC;
					var ^CGroupDef pxGroupDef=FindGroup(sGroup);
					if(pxGroupDef!=null)then
						JoinStringArrays(asEnemies,pxGroupDef^.m_asMembers);
					endif;
				endif;
			endfor;
			asEnemies.QSort();

			var ^CMoveDef pxMDef = ^(m_axMoves.NewEntryRef());
			if(pxMDef == null)then continue; endif;
			m_asMoves.AddEntry(pxMove^.Name());
			pxMDef^.m_asFighters = asFighters;
			pxMDef^.m_asEnemies = asEnemies;
			pxMDef^.m_axAnims = axAnims;
			pxMDef^.m_fLinkDelay = fLinkDelay;
			pxMDef^.m_xLink = xLink;
			pxMDef^.m_bInstantDelete = bInstantDelete;
			pxMDef^.m_axBodyParts = axBodyParts;
			pxMDef^.m_dwFlags = 0b;
			if(bDelCorpse)then
				pxMDef^.m_dwFlags |= CMoveDef.DELETE_CORPSE;
			endif;
		endfor;
	endproc;
	
//	proc ref CFinishingMoveMgr.CFighterDef GetFighterDef(string p_sName)
//		var CFighterDef xFind;xFind.m_sName=p_sName;
//		var int iIdx=m_axFighters.BinarySearch(xFind);
//		if(iIdx==-1) then
//			iIdx=m_axFighters.BinaryInsert(xFind);
//		endif;
//		return m_axFighters[iIdx];
//	endproc;
	
endclass;

