class CPos inherit CGameObj

	export constructor()
		CPosMgr.Get()^.AddPos(GetName(), GetPos());
	endconstructor;

	proc void OnInit(bool p_bLoad)
		super.OnInit(p_bLoad);

		if(!p_bLoad)then
			SetType("Pos");
		endif;
	endproc;

	export destructor()
	enddestructor;

endclass;

class CPosMgr

	static var ^CPosMgr ms_pxInst;

	constructor()
		ms_pxInst=null;
	endconstructor;

	export static proc ^CPosMgr Get()
		if(ms_pxInst==null)then
			ms_pxInst=new CPosMgr;
		endif;
		return ms_pxInst;
	endproc;

	export static proc void ShutStatic()
		delete ms_pxInst;
	endproc;


	var array string	m_asNames;
	var array vec3		m_avData;

	export proc void AddPos(string p_sName, vec3 p_vPos)
		//L CSrvWrap.LogInfo("PosMgr","AddPos("+p_sName+", "+p_vPos.ToString()+")");
		var int idx=m_asNames.FindEntry(p_sName);
		if(idx!=-1)then
			CSrvWrap.LogError("PosMgr","AddPos() failed, pos with name '"+p_sName+"' ready exist");
			return;
		endif;
		m_asNames.AddEntry(p_sName);
		m_avData.AddEntry(p_vPos);
	endproc;

	export proc vec3 GetPos(string p_sName)
		var int idx=m_asNames.FindEntry(p_sName);
		if(idx==-1)then
			CSrvWrap.LogError("PosMgr","GetPos() failed, pos with name '"+p_sName+"' not found");
			var vec3 vInvalid;
			return vInvalid;
		endif;
		return m_avData[idx];
	endproc;

endclass;

//class CTempParticle inherit CGameObj
//
//	var int 			m_iKillTimer;
//	var int 			m_iStartTimer;
//	var int 			m_iSinkTimer;
//	var CGameTimeSpan 	m_xLifeTime;
//	var CGameTimeSpan 	m_xStartDelay;
//	var CGameTimeSpan 	m_xSinkSpeed;
//
//	var string 			m_sEffect;
//	constructor()
//		SetVisible(false);
//  endconstructor;
//
//	destructor()
//		DeleteTimer(m_iKillTimer);
//		DeleteTimer(m_iStartTimer);
//		DeleteTimer(m_iSinkTimer);
//	enddestructor;
//
//	//Parameter: (Effecttype, Lifetime)
//	//	Funken
//	//	Feuer
//	//	Blut_01
//	//	Blut_02
//	//	blaetterexplo
//
//
//	export proc void Init(string p_sEffect,real p_fLifetime)
//		InitEvents();
//		m_xSinkSpeed=0.0f;
//		m_xLifeTime=p_fLifetime;
//		m_iKillTimer=CreateTimer(195,m_xLifeTime,false);
//		SetGFX(p_sEffect);
//		SetVisible(true);
//	endproc;
//
//	export proc void Init(string p_sEffect,real p_fLifetime, real p_fStartDelay)
//		InitEvents();
//		m_xSinkSpeed=0.0f;
//		m_sEffect=p_sEffect;
//		m_xLifeTime=p_fLifetime;
//		m_xStartDelay=p_fStartDelay;
//		m_iStartTimer=CreateTimer(196,m_xStartDelay,false);
//	endproc;
//
//	export proc void Init(string p_sEffect,real p_fLifetime, real p_fStartDelay, real p_fSinkSpeed)
//		m_xSinkSpeed=0.0f;
//		InitEvents();
//		m_sEffect=p_sEffect;
//		m_xLifeTime=p_fLifetime;
//		m_xStartDelay=p_fStartDelay;
//		m_xSinkSpeed=p_fSinkSpeed;
//		m_iStartTimer=CreateTimer(196,m_xStartDelay,false);
//	endproc;
//
//	export proc void Init(string p_sEffect,real p_fLifetime, string p_sAnim, int p_iAnimParameter)
//		m_xSinkSpeed=0.0f;
//		InitEvents();
//		m_xLifeTime=p_fLifetime;
//		m_iKillTimer=CreateTimer(195,m_xLifeTime,false);
//		SetGFX(p_sEffect);
//		SetAnim(p_sAnim,p_iAnimParameter);
//		SetVisible(true);
//	endproc;
//
//	export proc void HandleEvent(ref CGameEvtPtr p_rxEvtPtr)
//		if(p_rxEvtPtr.GetClass()==ms_xTimerClass)then
//			if(p_rxEvtPtr.GetInt(0)==195)then
//				Delete();
//			endif;
//			if(p_rxEvtPtr.GetInt(0)==196)then
//				m_iKillTimer=CreateTimer(195,m_xLifeTime,false);
//				var CGameTimeSpan 	xTemp=0.0;
//				m_iSinkTimer=CreateTimer(197,xTemp,false);
//				SetGFX(m_sEffect);
//				SetVisible(true);
//			endif;
//			if(p_rxEvtPtr.GetInt(0)==197)then
//				var vec3 vPos=GetPos();
//				vPos.SetZ(vPos.GetZ()-100.0f);
//				MoveAction(vPos,m_xSinkSpeed.GetSecondsF());
//			endif;
//		endif;
//	endproc;
//
//endclass;

/*
class CGroundSinker inherit CGameObj

	var real	m_fSinkTime;
	var real	m_fSinkSpeed;

	constructor()
		SetVisible(false);
	endconstructor;

	destructor()
	enddestructor;

	proc void OnActionEnd(bool p_bBroken)
		Delete();
	endproc;

	//Parameter: (object's gfx name, sink time, sink speed)
	//	Stones_03
	//	Stones_02
	//	WoodLog
	//
	export proc void Init(string p_sGfx,real p_fTime,real p_fSpeed)
		InitEvents();
		m_fSinkTime=p_fTime;
		m_fSinkSpeed=p_fSpeed;
		SetGFX(p_sGfx);
	endproc;

	export proc void HandleEvent(ref CGameEvtPtr p_rxEvtPtr)
		var vec3 vPos=GetPos();
		if(p_rxEvtPtr.GetClass()=="Drop")then
			vPos.SetX(p_rxEvtPtr.GetFloat(0));
			vPos.SetY(p_rxEvtPtr.GetFloat(1));
			vPos.SetZ(CSrvWrap.GetScapeMgr().GetHeight(vPos.GetX(),vPos.GetY()));
			SetPos(vPos);
			SetVisible(true);
			vPos.SetZ(vPos.GetZ()-m_fSinkTime*m_fSinkSpeed);
			MoveAction(vPos,m_fSinkSpeed);
		endif;
	endproc;

endclass;
*/

class CInfoObject inherit CGameObj

	var string			m_sInfo;
//	var int 			m_iTimer;
//	var CGameTimeSpan 	m_xTime;

	constructor()
//		InitEvents();
	endconstructor;

	destructor()
	enddestructor;

	export proc void OnInit(bool p_bLoad)
		super.OnInit(p_bLoad);
   		if(!p_bLoad)then
			SetType("INFO");
			var ^CAttribs pxAttribs=GetAttribs();
			if(pxAttribs==null)then pxAttribs=InitAttribs();endif;
			if(!pxAttribs^.ContainsKey("info"))then
				pxAttribs^.SetValue("info","Default");
			endif;
			m_sInfo=pxAttribs^.GetValue("info");
		else
			var ^CAttribs pxAttribs=GetAttribs();
			if(pxAttribs==null)then pxAttribs=InitAttribs();endif;
			if(!pxAttribs^.ContainsKey("info"))then
				pxAttribs^.SetValue("info","Default");
			endif;
			if(pxAttribs!=null)then
				m_sInfo=pxAttribs^.GetValue("info");
			else
				CSrvWrap.LogError("InfoObj","Could not read object attribs!" );
			endif;
		endif;
//		m_xTime=10.0f;
//		m_iTimer = CreateTimer(99,m_xTime,true);
	endproc;

/*
	proc void HandleEvent(ref CGameEvtPtr p_rxEvtPtr)
		super.HandleEvent(p_rxEvtPtr);
		if (p_rxEvtPtr.GetClass() == ms_xTimerClass) then
			if (p_rxEvtPtr.GetInt(0)==99) then
				//CSrvWrap.LogWarning("InfoObj","m_sInfo: "+m_sInfo);
				SetDebugText(m_sInfo,{0.0,0.0,4.0});
				DeleteTimer(m_iTimer);
			endif;
		endif;
	endproc;
*/
endclass;

class CFeedback

	export const int	ATTACK		= 0;
	export const int	ECONOMY		= 1;
	export const int	DIPLOMACY	= 2;
	export const int	STORY		= 3;
	export const int	INFO		= 4;
	export const int	SYSTEM		= 5;
	export const int	GAMEPLAY	= 6;
	
	export const int 	ALL			= -2;
	
	static var ^CFeedback ms_pxInst;
	static var array int	ms_aiTimeoutMap;
	static var array color	ms_axColorMap;
	static var array string	ms_asIcons;

	constructor()
		ms_aiTimeoutMap.AddEntry(10000);
		ms_aiTimeoutMap.AddEntry(10000);
		ms_aiTimeoutMap.AddEntry(10000);
		ms_aiTimeoutMap.AddEntry(10000);
		ms_aiTimeoutMap.AddEntry(10000);
		ms_aiTimeoutMap.AddEntry(10000);
		ms_aiTimeoutMap.AddEntry(10000);

		ms_axColorMap.AddEntry({{255,0,0,255}});
		ms_axColorMap.AddEntry({{184,218,107,255}});
		ms_axColorMap.AddEntry({{184,197,217,255}});
		ms_axColorMap.AddEntry({{218,195, 132,255}});
		ms_axColorMap.AddEntry({{246,193,71,255}});
		ms_axColorMap.AddEntry({{195,195,195,255}});
		ms_axColorMap.AddEntry({{246,193,71,255}});
		
		ms_asIcons.AddEntry("attack");
		ms_asIcons.AddEntry("economy");
		ms_asIcons.AddEntry("diplomacy");
		ms_asIcons.AddEntry("story");
		ms_asIcons.AddEntry("info");
		ms_asIcons.AddEntry("system");
		ms_asIcons.AddEntry("info");
	
	endconstructor;

	destructor()
	enddestructor;

	export static proc ref CFeedback Get()
		if(ms_pxInst==null)then
			ms_pxInst = new CFeedback();
		endif;
		return ms_pxInst^;
	endproc;

	proc bool CheckPlayer(int p_iOwner)
		var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
		if(pxLevel==null)then return false; endif;
		var ^CLevelInfoHost pxLI =^(pxLevel^.GetLevelInfo());
		if(pxLI==null)then return false; endif;
		var ^CLevelInfo.CPlayerSlot pxPS = pxLI^.GetOwnerPlayerSlot(p_iOwner);
		if(pxPS==null)then return false; endif;
		
		if(pxPS^.IsFree() || 
		pxPS^.GetType()=="ai_Schnecke" || pxPS^.GetType()=="ai_Schnecke_easy" || pxPS^.GetType()=="ai_Schnecke_medium" || pxPS^.GetType()=="ai_Schnecke_hard" ||
		pxPS^.GetType()=="ai_Giraffe" || pxPS^.GetType()=="ai_Giraffe_easy" || pxPS^.GetType()=="ai_Giraffe_medium" || pxPS^.GetType()=="ai_Giraffe_hard" || 
		pxPS^.GetType()=="ai_Dodo"|| pxPS^.GetType()=="ai_Dodo_easy"|| pxPS^.GetType()=="ai_Dodo_medium"|| pxPS^.GetType()=="ai_Dodo_hard"|| 
		pxPS^.GetType()=="ai_Mikrobe" )then 
			return false; 
		endif;
		return true;
	endproc;

	export static proc void Print(int p_iPlayer, string p_sMsg)
		Print(p_iPlayer, INFO, p_sMsg);
	endproc;
	
	export static proc void Print(int p_iPlayer, int p_iType, string p_sMsg)
		Get();
		Print(p_iPlayer, p_iType, p_sMsg, {0.0f,0.0f,0.0f},ms_aiTimeoutMap[p_iType]);
	endproc;
	
	export static proc void Print(int p_iPlayer, int p_iType, string p_sMsg,vec3 p_vPos)
		Get();
		Print(p_iPlayer, p_iType, p_sMsg, p_vPos,ms_aiTimeoutMap[p_iType]);
	endproc;
	
	export static proc void Print(int p_iPlayer, int p_iType, string p_sMsg, vec3 p_vPos,int p_iTimeout)
		var CNewsTickerData xNTData;
		xNTData.m_sMsg=p_sMsg;
		xNTData.m_vPos=p_vPos;
		xNTData.m_iTimeOut=p_iTimeout;
		xNTData.m_iSenderOwner=-1;
		xNTData.m_dwNTType=CNewsTickerData.NTT_System;
		if(p_iType==ATTACK)then
			xNTData.m_dwNTType=CNewsTickerData.NTT_Attack;
		elseif(p_iType==ECONOMY)then
			xNTData.m_dwNTType=CNewsTickerData.NTT_Economy;
		elseif(p_iType==DIPLOMACY)then
			xNTData.m_dwNTType=CNewsTickerData.NTT_Diplomacy;
		elseif(p_iType==STORY)then
			xNTData.m_dwNTType=CNewsTickerData.NTT_Story;
		elseif(p_iType==INFO)then
			xNTData.m_dwNTType=CNewsTickerData.NTT_Info;
		elseif(p_iType==GAMEPLAY)then
			xNTData.m_dwNTType=CNewsTickerData.NTT_Gameplay;
		endif;
		
		if(ms_pxInst==null) then Get(); endif;
		if(p_iPlayer==-2) then
			var int i, iC=8;
			for(i=0) cond(i<iC) iter(++i) do
				
				CSrvWrap.SendNewstickerMsg(i,xNTData);
			endfor;
		else
			CSrvWrap.SendNewstickerMsg(p_iPlayer,xNTData);
		endif;
	endproc;

	/*proc bool Send(string p_sMsg , int p_iPlayer)
		if(CheckPlayer(p_iPlayer))then
			CSrvWrap.SendGenericEvtToPlayer(p_iPlayer, "Feedback\t"+p_sMsg);
			return true;
		endif;
		return false;
	endproc;

	export static proc void Print(string p_sMsg)
		if(ms_pxInst==null)then
			ms_pxInst = new CFeedback();
		endif;
		var int i;
		for(i=0)cond(i<CLevelInfo.GetMaxPlayers())iter(i++)do
			ms_pxInst^.Send(p_sMsg, i);
		endfor;
	endproc;

	export static proc bool Print(string p_sMsg, int p_iOwner)
		if(ms_pxInst==null)then
			ms_pxInst = new CFeedback();
		endif;
		return ms_pxInst^.Send(p_sMsg, p_iOwner);
	endproc;
*/
	export static proc void Kill()
		delete ms_pxInst;
		ms_pxInst = null;
	endproc;

endclass;


// class CSoundEvent: provides a way for the server to have the client play a sound
class CSoundEvent

	// -- constants for the p_iType parameter of all Play* variants
	export const int SOUNDEVT_TYPE_3D				= 1;
	export const int SOUNDEVT_TYPE_FAKE_3D	= 2;
	export const int SOUNDEVT_TYPE_GLOBAL		= 3;

	// -- singleton instance
	static var ^CSoundEvent ms_pxInst;

	constructor()
	endconstructor;

	destructor()
	enddestructor;

	export static proc ref CSoundEvent Get()
		if(ms_pxInst==null)then
			ms_pxInst = new CSoundEvent();
		endif;
		return ms_pxInst^;
	endproc;

	// -- find out if player is not a "real" (human) player
	proc bool CheckPlayer(int p_iOwner)
		var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
		if(pxLevel==null)then return false; endif;
		var ^CLevelInfoHost pxLI =^(pxLevel^.GetLevelInfo());
		if(pxLI==null)then return false; endif;
		var ^CLevelInfo.CPlayerSlot pxPS = pxLI^.GetOwnerPlayerSlot(p_iOwner);
		if(pxPS==null)then return false; endif;
		if(pxPS^.IsFree() || 
		pxPS^.GetType()=="ai_Schnecke" || pxPS^.GetType()=="ai_Schnecke_easy" || pxPS^.GetType()=="ai_Schnecke_medium" || pxPS^.GetType()=="ai_Schnecke_hard" ||
		pxPS^.GetType()=="ai_Giraffe" || pxPS^.GetType()=="ai_Giraffe_easy" || pxPS^.GetType()=="ai_Giraffe_medium" || pxPS^.GetType()=="ai_Giraffe_hard" || 
		pxPS^.GetType()=="ai_Dodo"|| pxPS^.GetType()=="ai_Dodo_easy"|| pxPS^.GetType()=="ai_Dodo_medium"|| pxPS^.GetType()=="ai_Dodo_hard"|| 
		pxPS^.GetType()=="ai_Mikrobe" )then
			return false; 
		endif;
		return(true);
	endproc;

	// -- send a sound event to player(s)
	proc bool Send(string p_sSound, int p_iType, vec3 p_vPos, bitset p_dwPlayerMask)
		var int i;
		for(i=0)cond(i<CGameBase.GetMaxPlayers())iter(i++)do
			var bitset dwTest = 01b << i;
			if( (p_dwPlayerMask & dwTest) != 00b )then
				if(CheckPlayer(i))then
					CSrvWrap.SendGenericEvtToPlayer(i, "SoundEvt\t"+p_sSound+"\t"+p_iType.ToString()+"\t"+p_vPos.ToString());
				endif;
			endif;
		endfor;
		return(true);
	endproc;

	// -- play a sound on multiple clients
	export static proc bool PlayMulti(string p_sSound, int p_iType, vec3 p_vPos, bitset p_dwPlayerMask)
		if(ms_pxInst==null)then
			ms_pxInst = new CSoundEvent();
		endif;
		return(ms_pxInst^.Send(p_sSound, p_iType, p_vPos, p_dwPlayerMask));
	endproc;

	// -- play a sound on all clients
	export static proc bool PlayAll(string p_sSound, int p_iType, vec3 p_vPos)
		var bitset dwPlayerMask;
		dwPlayerMask = 0FFFFFFFFh;
		return(PlayMulti(p_sSound, p_iType, p_vPos, dwPlayerMask));
	endproc;

	// -- play a sound on a single client
	export static proc bool PlaySingle(string p_sSound, int p_iType, vec3 p_vPos, int p_iPlayerNo)
		var bitset dwPlayerMask;
		dwPlayerMask = 01b << p_iPlayerNo;
		return(PlayMulti(p_sSound, p_iType, p_vPos, dwPlayerMask));
	endproc;
	
	// -- play a sound on multiple client but for one
	export static proc bool PlayAllButOne(string p_sSound, int p_iType, vec3 p_vPos, int p_iPlayerNo)
		var bitset dwPlayerMask;
		dwPlayerMask = 0FFFFFFFFh &~ (01b << p_iPlayerNo);
		return(PlayMulti(p_sSound, p_iType, p_vPos, dwPlayerMask));
	endproc;

endclass;

class CSequenceSource

	static var CEvtSource ms_xSource;

	export static proc bool Subscribe(^CEvtSink p_pxSink)
		return ms_xSource.Subscribe(p_pxSink);
	endproc;

	export static proc bool Unsubscribe(^CEvtSink p_pxSink)
		return ms_xSource.Unsubscribe(p_pxSink);
	endproc;

	export static proc int Broadcast(ref CEvtPointer p_rxEP)
		return ms_xSource.Broadcast(p_rxEP);
	endproc;
endclass;

class CDlgSceneSource

	static var CEvtSource ms_xSource;

	export static proc bool Subscribe(^CEvtSink p_pxSink)
		return ms_xSource.Subscribe(p_pxSink);
	endproc;

	export static proc bool Unsubscribe(^CEvtSink p_pxSink)
		return ms_xSource.Unsubscribe(p_pxSink);
	endproc;

	export static proc int Broadcast(ref CEvtPointer p_rxEP)
		return ms_xSource.Broadcast(p_rxEP);
	endproc;
	
endclass;

class CRegionSink inherit CEvtSink
	
	export var procref<bool, CObjHndl> m_xOnObjAdd;
	export var procref<bool, CObjHndl> m_xOnObjRem;
	export var procref<bool> m_xOnChange;
	var CObjList m_xObjects;
	
	//don't export this, because of sink destructor unsubscribe safety!!!
	var ^CRegion m_pxRegion;
	
	export constructor()
	endconstructor;
	
	export destructor()
		DeleteRegion();
	enddestructor;
	
	export proc bool HasRegion()
		return m_pxRegion!=null;
	endproc;
	
	export proc void SetRegion(^CRegion p_pxRegion)
		Unsubscribe(true);
		m_pxRegion=p_pxRegion;
	endproc;
	
	export proc ^CRegion GetRegion()
		return m_pxRegion;
	endproc;
	
	export proc void DeleteRegion()
		if(m_pxRegion!=null) then
			Unsubscribe(true);
			if(CSrvWrap.GetRegionMgr().GetWorldRgnHndl()!=m_pxRegion^.GetHandle()) then
				CSrvWrap.GetRegionMgr().DeleteRegion(m_pxRegion^.GetGUID());
				m_pxRegion=null;
			endif;
		endif;
	endproc;

	proc void DoAll(bool p_bAdd)
		if(m_pxRegion==null) then return; endif;
		var int i, iC = m_pxRegion^.NumObjects();
		var CObjList xList;
		for(i=0) cond(i<iC) iter(i++) do
			xList.Include(m_pxRegion^.GetObject(i));
		endfor;
		iC=xList.NumEntries();
		for(i=0) cond(i<iC) iter(i++) do
			if (p_bAdd) then
				AddObj(xList[i]);
			else
				RemObj(xList[i]);
			endif;
		endfor;
	endproc;
	
	export proc void Subscribe()
		if(m_pxRegion!=null) then
			m_pxRegion^.Subscribe(this);
		endif;
		AddAll();
	endproc;
	
	export proc void Unsubscribe()
		Unsubscribe(false);
	endproc;
	
	export proc void Unsubscribe(bool p_bQuiet)
		if(m_pxRegion!=null)then
			m_pxRegion^.Unsubscribe(this);
		endif;
		if(!p_bQuiet)then
			RemAll();
		endif;
		m_xObjects.Clear();
	endproc;

	export proc void AddAll()
		DoAll(true);
	endproc;

	export proc void RemAll()
		DoAll(false);
	endproc;
	
	proc bool AddObj(CObjHndl p_xObj)
		if(m_xObjects.BinaryInclude(p_xObj)<0) then return false; endif;
		if(!m_xOnObjAdd.IsNull()) then
			m_xOnObjAdd.Call(p_xObj);
		endif;
		return true;
	endproc;
	
	proc bool RemObj(CObjHndl p_xObj)
		if(m_xObjects.BinaryExclude(p_xObj)<0)then return false; endif;
		if(!m_xOnObjRem.IsNull())then
			m_xOnObjRem.Call(p_xObj);
		endif;
		return true;
	endproc;
	
	export proc bool OnPush(ref CEvtPointer p_rxEP)
		//make sure add/rem is exactly, because some effects (smoke bomb thrower) are refcounted !!!!
		var ^CObjList pxAdd=^(m_pxRegion^.GetLastChObjsAdd());
		var ^CObjList pxRem=^(m_pxRegion^.GetLastChObjsRem());
		var int i,iAdd=pxAdd^.NumEntries(),iRem=pxRem^.NumEntries();
		var bool bChange=false;
		for (i=0) cond(i<iAdd) iter(++i) do
			if(AddObj(pxAdd^[i])) then bChange=true; endif;
		endfor;
		for (i=0) cond(i<iRem) iter(++i) do
			if(RemObj(pxRem^[i])) then bChange=true; endif;
		endfor;
		if(bChange) then
			if(!m_xOnChange.IsNull()) then m_xOnChange.Call(); endif;
		endif;
		return true;
	endproc;
	
	export proc CObjList GetObjects();
		return m_xObjects;
	endproc;
	
endclass;

class CServerUtils
	
	export static proc string GetObjHelpitemKey(^CGameObj p_pxObj)
		var CTechTree xTechTree = p_pxObj^.GetTechTree();
		var ^CAttribs pxAttr = p_pxObj^.GetAttribs();
		if(pxAttr==null)then return p_pxObj^.GetClassName(); endif;
		var string sObjPath = pxAttr^.GetValue("ObjPath");
		if(sObjPath.IsEmpty()) then return p_pxObj^.GetClassName(); endif;
		return xTechTree.GetValueS(sObjPath+"/description",p_pxObj^.GetClassName());
	endproc;
	
endclass;
