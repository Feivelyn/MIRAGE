class CAiWeaponMgr
	class CAiWeaponDesc
		class CAiWeaponBonus
			var array string	m_asTypeName;
			var array real		m_afTypeValue;
		
			var array string	m_asClassName;
			var array real		m_afClassValue;
					
			
			export proc void Init(^CPropDB.CNode p_pxBoni)
				if(p_pxBoni==null)then return; endif;
				var ^CPropDB.CNode pxType=p_pxBoni^.Get("Type");
				if(pxType!=null)then
					var int i,iC=pxType^.NumSubs();
					for(i=0)cond(i<iC)iter(i++)do
						var ^CPropDB.CNode pxBonus=^((pxType^)[i]);
						AddBonus("Type",pxBonus^.Name(),pxBonus^.ValueR());
					endfor;
				endif;
				var ^CPropDB.CNode pxClass=p_pxBoni^.Get("Class");
				if(pxClass!=null)then
					var int i,iC=pxClass^.NumSubs();
					for(i=0)cond(i<iC)iter(i++)do
						var ^CPropDB.CNode pxBonus=^((pxClass^)[i]);
						AddBonus("Class",pxBonus^.Name(),pxBonus^.ValueR());
					endfor;
				endif;
			endproc;
		
			
			export proc real GetBonus(string p_sType,string p_sClass)
				var real fBonus = 0.0;
				var int iIdx = m_asTypeName.FindEntry(p_sType);
				if(iIdx!=-1)then
					fBonus += m_afTypeValue[iIdx];
				endif;
				iIdx = m_asClassName.FindEntry(p_sClass);
				if(iIdx!=-1)then
					fBonus += m_afClassValue[iIdx];
				endif;
				return fBonus;
			endproc;

			
			export proc void Add(CAiWeaponMgr.CAiWeaponDesc.CAiWeaponBonus p_xBonus)
				var int i,iC=p_xBonus.m_asTypeName.NumEntries();
				for(i=0)cond(i<iC)iter(i++)do
					AddBonus("Type",p_xBonus.m_asTypeName[i],p_xBonus.m_afTypeValue[i]);
				endfor;
				iC=p_xBonus.m_asClassName.NumEntries();
				for(i=0)cond(i<iC)iter(i++)do
					AddBonus("Class",p_xBonus.m_asClassName[i],p_xBonus.m_afClassValue[i]);
				endfor;
			endproc;

			
			proc void AddBonus(string p_sType,string p_sClass,real p_fValue)
				var int iIdx;
				if(p_sType=="Type")then
					iIdx = m_asTypeName.FindEntry(p_sClass);
					if(iIdx!=-1)then
						m_afTypeValue[iIdx]+=p_fValue;
					else
						iIdx = m_asTypeName.AddEntry(p_sClass);
						m_afTypeValue.AddEntry(p_fValue);
					endif;
				elseif(p_sType=="Class")then
					iIdx = m_asClassName.FindEntry(p_sClass);
					if(iIdx!=-1)then
						m_afClassValue[iIdx]+=p_fValue;
					else
						iIdx = m_asClassName.AddEntry(p_sClass);
						m_afClassValue.AddEntry(p_fValue);
					endif;
				endif;
				return;
			endproc;
		endclass;

		var string	m_sName;	
		var real	m_fDefense;
		var real	m_fDamage;
		var real	m_fMinRange;
		var real	m_fMaxRange;
		var real	m_fFrequency;
		var real	m_fEndDmg;
		var real 	m_fHitrange;
		var bool	m_bSecondary;
		var int		m_iSlot;
		var bool	m_bProjectile;
		var CAiWeaponBonus	m_xAttack,m_xDefense;
		var real	m_fValue;
		
		export proc void Init(^CPropDB.CNode p_pxWeapon)
			if(p_pxWeapon==null)then return; endif;
			m_sName=p_pxWeapon^.Name();
			m_fDefense=p_pxWeapon^.GetValueR("defense", 0.0f);
			m_fDamage=p_pxWeapon^.GetValueR("damage", 0.0f);
			m_fMinRange=p_pxWeapon^.GetValueR("minattackrange", 0.0f);
			m_fMaxRange=p_pxWeapon^.GetValueR("range", 0.0f);
			m_fFrequency=p_pxWeapon^.GetValueR("frequency", 0.0f);
			m_fEndDmg=p_pxWeapon^.GetValueR("enddamage", 0.0f);
			m_fHitrange=p_pxWeapon^.GetValueR("hitrange", 0.0f);
			m_bSecondary=(p_pxWeapon^.GetValueI("secondary", 0)==1);
			m_iSlot=p_pxWeapon^.GetValueI("slot", 0);
			m_bProjectile=(p_pxWeapon^.GetValueI("Projectile", 0)==1);
			
			m_xAttack.Init(p_pxWeapon^.Get("AttackBonus"));
			m_xDefense.Init(p_pxWeapon^.Get("DefenseBonus"));
		endproc;

		export proc string GetName()		return m_sName;			endproc;
		export proc real GetMinRange() 		return m_fMinRange; 	endproc;
		export proc real GetMaxRange() 		return m_fMaxRange; 	endproc;
		export proc real GetFrequency() 	return m_fFrequency; 	endproc;	
		export proc real GetEndDamage()		return m_fEndDmg; 		endproc;
		export proc real GetHitrange() 		return m_fHitrange; 	endproc;
		export proc bool IsSecondary()		return m_bSecondary;	endproc;
		export proc bool IsLeftHand()		return (m_iSlot==1);	endproc;
		export proc bool IsRightHand()		return (m_iSlot==0);	endproc;
		export proc bool IsArmor()			return (m_iSlot==2);	endproc;
		
		export proc real GetValue()			return m_fValue;		endproc;
		export proc void SetValue(real p_fV)
			m_fValue=p_fV;
		endproc;
				
		export proc real GetDmg(string p_sType,string p_sClass)
			return m_fDamage*(1.0f+(m_xAttack.GetBonus(p_sType,p_sClass)/100.0f));
		endproc;
		
		export proc real GetDefense(string p_sType,string p_sClass)
			return m_fDefense*(1.0f+(m_xDefense.GetBonus(p_sType,p_sClass)/100.0f));
		endproc;
		
		export proc void Add(CAiWeaponMgr.CAiWeaponDesc p_xAdditional)
			m_fDamage+=p_xAdditional.m_fDamage;
			m_fDefense+=p_xAdditional.m_fDefense;
			m_fEndDmg+=p_xAdditional.m_fEndDmg;

			m_fHitrange=Math.Max(m_fHitrange,p_xAdditional.m_fHitrange);
			m_fMaxRange=Math.Max(m_fMaxRange,p_xAdditional.m_fMaxRange);
			
			m_xAttack.Add(p_xAdditional.m_xAttack);
			m_xDefense.Add(p_xAdditional.m_xDefense);
		endproc;
		
		export proc void Dump()
		endproc;
		
		export proc bool op_Greater(ref CAiWeaponMgr.CAiWeaponDesc p_rxOther)
			return (m_fValue>p_rxOther.m_fValue);
		endproc;
	endclass;
	
	export proc real GetFightEffectiveness(^CAiNodeInstance p_pxAttacker,^CAiNodeInstance p_pxTarget)
		if((p_pxAttacker==null)||(p_pxTarget==null))then return -1.0f; endif;

		var string sAttackType,sAttackClass;
		if(!GetTypeClass(p_pxAttacker,sAttackType,sAttackClass))then return -1.0f; endif;
		var string sTargetType,sTargetClass;
		if(!GetTypeClass(p_pxTarget,sTargetType,sTargetClass))then return -1.0f; endif;

		// calc best weapons forattacker
		var CAiWeaponDesc xAttackP,xAttackM,xAttackS;
		if(!FindBestWeapons(p_pxAttacker,sTargetType,sTargetClass,xAttackP,xAttackM,xAttackS))then return -1.0f; endif;

		// calc best weapons fortarget
		var CAiWeaponDesc xTargetP,xTargetM,xTargetS;
		if(!FindBestWeapons(p_pxTarget,sAttackType,sAttackClass,xTargetP,xTargetM,xTargetS))then return -1.0f; endif;
		
		// attacker has no primary weapon, he can't attack
		if(xAttackP.GetName().IsEmpty())then
			return -1.0f;
		endif;
				
		// target has no primary weapon
		if(xTargetP.GetName().IsEmpty())then
			return xAttackP.GetValue();
		endif;
		
		// find attack distance
		var real fAttackDist=Math.Min(xAttackP.GetMaxRange(),xTargetP.GetMaxRange());
		
		var ^CAiWeaponDesc pxAttackWeapon=null;
		if(!xAttackS.GetName().IsEmpty() && xAttackS.GetMaxRange()>=fAttackDist)then
			pxAttackWeapon=^xAttackS;
		elseif(!xAttackM.GetName().IsEmpty() && xAttackM.GetMaxRange()>=fAttackDist)then
			pxAttackWeapon=^xAttackM;
		elseif((xAttackP.GetMaxRange()>=fAttackDist) && (xAttackP.GetMinRange()<=fAttackDist))then
			pxAttackWeapon=^xAttackP;
		else
			return -1.0f;
		endif;

		var ^CAiWeaponDesc pxTargetWeapon=null;
		if(!xTargetS.GetName().IsEmpty() && xTargetS.GetMaxRange()>=fAttackDist)then
			pxTargetWeapon=^xTargetS;
		elseif(!xTargetM.GetName().IsEmpty() && xTargetM.GetMaxRange()>=fAttackDist)then
			pxTargetWeapon=^xTargetM;
		elseif((xTargetP.GetMaxRange()>=fAttackDist) && (xTargetP.GetMinRange()<=fAttackDist))then
			pxTargetWeapon=^xTargetP;
		else
			return xAttackP.GetValue();
		endif;
		
		return (pxAttackWeapon^.GetValue()/pxTargetWeapon^.GetValue());
	endproc;
	
	proc bool FindBestWeapons(^CAiNodeInstance p_pxNI,string p_sType,string p_sClass,ref CAiWeaponMgr.CAiWeaponDesc po_rxPrimary,ref CAiWeaponMgr.CAiWeaponDesc po_rxSecondaryM,ref CAiWeaponMgr.CAiWeaponDesc po_rxSecondaryS)
		if(p_pxNI==null)then return false; endif;
		var CAiWeaponDesc xLH,xArmor;
		// find best weapons forall 5 categories
		var int i,iC=p_pxNI^.GetNumWeapons();
		for(i=0)cond(i<iC)iter(i++)do
			var CAiWeaponDesc xW=GetWeapon(p_pxNI^.GetWeapon(i));
			CalcWeaponValue(xW,p_sType,p_sClass);
			// righthand
			if(xW.IsRightHand())then
				// primary
				if(!xW.IsSecondary())then
					// better one
					if(xW>po_rxPrimary)then
						po_rxPrimary=xW;
					endif;
				// secondary (mid and short range weapons)
				else
					// short range weapon
					if(xW.GetMaxRange()<1.0f)then
						// better one
						if(xW>po_rxSecondaryS)then
							po_rxSecondaryS=xW;
						endif;
					// mid range weapon
					else
						// better one
						if(xW>po_rxSecondaryM)then
							po_rxSecondaryM=xW;
						endif;
					endif;
				endif;
			// lefthand
			elseif(xW.IsLeftHand())then
				// better one
				if(xW>xLH)then
					xLH=xW;
				endif;
			// armor
			elseif(xW.IsArmor())then
				// better one
				if(xW>xArmor)then
					xArmor=xW;
				endif;
			endif;
		endfor;
		// add values of lefthanded weapon and armor to other 3 range categories
		// so we have same values as in game
		po_rxPrimary.Add(xLH);po_rxPrimary.Add(xArmor);
		po_rxSecondaryM.Add(xLH);po_rxSecondaryM.Add(xArmor);
		po_rxSecondaryS.Add(xLH);po_rxSecondaryS.Add(xArmor);
		return true;
	endproc;
	

	proc void CalcWeaponValue(ref CAiWeaponMgr.CAiWeaponDesc po_rxWeapon,string p_sType,string p_sClass)
		var real fDmg=po_rxWeapon.GetDmg(p_sType,p_sClass);
		var real fDef=po_rxWeapon.GetDefense(p_sType,p_sClass);
		
		var real fValMod=(1.0f+(po_rxWeapon.GetMaxRange()-po_rxWeapon.GetMinRange())*0.1f);
		fValMod*=60.0f/Math.Max(po_rxWeapon.GetFrequency(),1.0f);
		fValMod*=1.0f+(po_rxWeapon.GetHitrange()+po_rxWeapon.GetEndDamage())*0.01f;
		
		po_rxWeapon.SetValue((fDmg+fDef)*fValMod);
	endproc;
	

	proc bool GetTypeClass(^CAiNodeInstance p_pxNI,ref string po_rsType,ref string po_rsClass)
		if(p_pxNI==null)then return false; endif;
		var string sTTPath=p_pxNI^.GetTTPath();
		var array string asParts;
		sTTPath.Split(asParts,"/",true);
		if(asParts.NumEntries()<2)then return false; endif;
		po_rsClass=asParts[asParts.NumEntries()-1];
		po_rsType=asParts[asParts.NumEntries()-2];
		return true;
	endproc;

	proc CAiWeaponMgr.CAiWeaponDesc GetWeapon(^CPropDB.CNode p_pxWeapon)
		var CAiWeaponDesc xWeapon;
		xWeapon.Init(p_pxWeapon);
		return xWeapon;
	endproc;
	
	constructor()
	endconstructor;
	
	destructor()
	enddestructor;

	// singleton interface
	static var ^CAiWeaponMgr	ms_pxInst;

	export static proc ^CAiWeaponMgr Get()
		if(ms_pxInst==null)then
			ms_pxInst=new CAiWeaponMgr();
		endif;
		return ms_pxInst;
	endproc;
	
	export static proc void ShutStatic()
		delete ms_pxInst;
	endproc;
endclass;
