///class CAiGoalBuildWorkers
class CAiGoalBuildWorkers inherit CAiGoal

	var int 					m_iNumUnits;
	var CAiConstructionInfoPtr 	m_pxUnitCInfo;
	var ^CAiBrain 				m_pxBrain;
	var ^CAiSensor				m_pxSensor;
	var string					m_sPlayerID;
	var int						m_iPlayerID;

	///constructor
	export constructor()
		m_iNumUnits=10;
	endconstructor;
	
	
	///destructor
	export destructor()
	enddestructor;
	
	
	///init
	export proc bool Init(^CAiBrain p_pxBrain)
		super.Init(p_pxBrain);
		
		m_pxBrain = p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return false; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
//		var int iType = 1+Random.GetInt()%iNumPlayers;
		var int iType = 1;
		
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		SetThinkWait(pxCM^.GetDifficultyInt()+iType);
		
		if(m_pxUnitCInfo==null)then
			var CAiNeedPtr		pxUnitNeed	= CAiNeed.Create(true, 1);
			var ^CAiTechTree	pxTT		= GetAiTechTree();
			if(pxTT!=null)then
				pxTT^.AddCharNIs(pxUnitNeed, "", -1, true, false);
			endif;
		endif;
		return true;
	endproc;
	
	
	///Shut
	export proc void Shut()
		if(m_pxUnitCInfo!=null)then
		endif;
	endproc;
	
	
	///called to set Number of Units
	export proc void SetNumUnits(int p_iNumUnits)
		m_iNumUnits=p_iNumUnits;
	endproc;
	
	
	///called to get number of units
	export proc int GetNumUnits()
		return m_iNumUnits;
	endproc;
	
	
	///called to get number of chars in production
	export proc int GetCharsInProduction()
		return GetNumTasks();
	endproc;
	
	
	///think
	export proc void Think()
		if(m_pxSensor==null)then return; endif;
		if(m_pxBrain==null)then return; endif;
		
		var string sTribe=m_pxSensor^.GetTechTree().GetTribe();
		var ^CAiPyramid pxPyr=m_pxSensor^.GetPyramid();
		var int iUnitCount=pxPyr^.GetTotalNumUnits();
		
		if(iUnitCount<m_iNumUnits)then
			var int iUnitsToBuild=m_iNumUnits-iUnitCount;
			var ^IAiModuleEconomy pxEMod = m_pxBrain^.GetEconomyModule();			
			var int i;
			
			for(i=0)cond(i<iUnitsToBuild)iter(i++)do
				var CAiConstructionInfoPtr pxCI=CAiConstructionInfo.Create();
				pxCI.GetConstructionInfo()^.CopyFrom(m_pxUnitCInfo);
				pxEMod^.ExternalRequestConstruction(pxCI);
			endfor;
		endif;
	endproc;


endclass;