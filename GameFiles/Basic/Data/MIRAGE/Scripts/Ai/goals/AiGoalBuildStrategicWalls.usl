///class CAiGoalBuildStrategicWalls
class CAiGoalBuildStrategicWalls inherit CAiGoal

	var ^CAiBrain 					m_pxBrain;
	var ^CAiSensor					m_pxSensor;
	var string						m_sPlayerID;
	var int							m_iPlayerID;
	var array ^CAiTaskBuildWalls	m_apxWallTasks;
	var CAiObjWrap					m_xOW;


	///constructor
	export constructor()
		m_apxWallTasks=0;
	endconstructor;
	
	
	///destructor
	export destructor()
	enddestructor;
	
	
	///init
	export proc bool Init(^CAiBrain p_pxBrain, CAiObjWrap p_xWorker)
		if(super.Init(p_pxBrain)==false)then return false; endif;
		m_pxBrain = p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return false; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
//		var int iType = 1+Random.GetInt()%iNumPlayers;
		var int iType = 1;
		
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		SetThinkWait(pxCM^.GetDifficultyInt()+iType);
		return true;
	endproc;
	
	
	///shut	
	export proc void Shut()
		var int i,iC=m_apxWallTasks.NumEntries();
		if(iC>0)then
			for(i=0)cond(i<iC)iter(i++)do
				var ^CAiTaskBuildWalls pxWallTask=m_apxWallTasks[i];
				pxWallTask^.Shut();
				RemoveTask(pxWallTask);
				delete pxWallTask;
			endfor;
		endif;
	endproc;
	
	
	///think
	export proc void Think()
		var int i,iC=m_apxWallTasks.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CAiTaskBuildWalls pxWallTask=m_apxWallTasks[i];
			if((pxWallTask^.IsAborted() || pxWallTask^.IsCompleted()) && pxWallTask^.IsWorking())then
				pxWallTask^.Start();
			endif;
			if(pxWallTask^.IsWorking()==false)then
				pxWallTask^.Shut();
				RemoveTask(pxWallTask);
				delete pxWallTask;
				m_apxWallTasks.DeleteEntryUS(i);
				i--;
				iC--;
			endif;
		endfor;
	endproc;


endclass;