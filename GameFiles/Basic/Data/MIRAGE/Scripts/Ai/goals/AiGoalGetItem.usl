///class CAiGoalGetItem
class CAiGoalGetItem inherit CAiGoalGeneralAttack

	var string	m_sItemName;
	var vec3	m_vSafeSpot;
	var int		m_iTimer;
	var int		m_iCounter;
	var vec3	m_vItemPos;
	var bool 	m_bEnemyIsThere;

	///constructor
	export constructor()
	endconstructor;
	
	
	///destructor
	export destructor()
	enddestructor;
	
	
	///init
	export proc bool Init(^CAiBrain p_pxBrain)
		super.Init(p_pxBrain);
		if(p_pxBrain==null)then return false; endif;
		m_pxBrain = p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return false; endif;
		
		m_sLevelName=CAiUtilityMgr.Get()^.GetLevelName(m_pxBrain);
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		m_vSafeSpot = m_pxSensor^.GetStartLocation();
		
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
		var int iType = 1+Random.GetInt()%iNumPlayers;
		
		SetThinkWait(30+iType);

		m_iCounter=0;
		m_bEnemyIsThere=false;
		
		m_sState = "new";
		return true;
	endproc;


	///Start
	export proc bool Start(^CAiAttackInfo p_pxAttackInfo)
		super.Start(p_pxAttackInfo);	
		if(m_xEnemies.NumEntries()<=0)then
			m_pxAttackInfo^.NotifyOnFailed();
			Deactivate();
			return false;
		endif;		
		m_sItemName=m_xEnemies[0].GetName();
		m_vItemPos=m_xEnemies[0].GetPos();
		return true;		
	endproc;
	
	
	///RequestUnit
	export proc bool RequestUnits(string p_sSolution)
		var ^CAiTechTree pxT=GetAiTechTree();
		if(pxT==null)then return false; endif;			
		
		m_pxSolution = pxT^.MakeDefinedSolution("FindItem_1", 1.0, 1.0);
		if(m_pxSolution==null)then return false; endif;		
		
		QueryEssentialsFromDefensePool(m_pxSolution);
		m_pxSolution^.DebugDump();
		m_xAllocator.SetSolution(m_pxSolution);				
		if(!m_xAllocator.Start(true, true))then return false; endif;
		
		return true;
	endproc;
	
	
	///think
	export proc void Think()	
		if(m_pxSensor==null) then return; endif;
		
		var ^CAiGoalMinistryOfDefense	pxMOD = GetMOD();
		if(pxMOD == null)then return; endif;		
		if(!m_xEnemies[0].IsValid())then
			m_pxAttackInfo^.NotifyOnFailed();
			Deactivate();
			return;
		endif;
	
		if(m_sState=="new")then			
			var CAiObjQuery xQuery;
			xQuery.SetOwner(m_iPlayerID);
			xQuery.SetClass("hu_warrior");
			xQuery.SetClass("aje_spearman",true);
			xQuery.SetClass("ninigi_archer",true);
			xQuery.SetClass("seas_warrior",true);
			xQuery.SetAttribPos("inventory_item_name","");
			
			var CAiObjWrapList xList;			
			if(xQuery.Execute(xList))then
				var CAiObjWrapList xUnits;

				if(pxMOD^.QueryUnits(xUnits, 1, 1, xList))then
					if(xUnits.NumEntries() == 1)then
						m_xAllocator.AddUnit(xUnits[0]);
						SeparateUnits();
						m_sState = "running";
						CheckPathToBuildPlace();
						return;
					endif;
				endif;
			endif;
			m_sState="build";
			CheckPathToBuildPlace();
		
		elseif(m_sState=="build")then
			if(!RequestUnits("FindItem_1"))then
				m_pxAttackInfo^.GetResult()="squad creation failed!";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;
			m_sState="waiting";
		
		elseif(m_sState=="waiting")then
			if(m_xAllocator.IsRunning())then
				m_xAllocator.AddUnits(m_xEssentialUnitsFromMOD);
				m_xEssentialUnitsFromMOD.Clear();
				SeparateUnits();
				m_sState = "running";
			elseif(m_xAllocator.IsNotPossible())then
				m_pxAttackInfo^.GetResult()="squad allcation failed!";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			elseif(m_xAllocator.IsAborted())then
				m_pxAttackInfo^.GetResult()="squad dead";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			elseif(!m_xAllocator.IsRunning())then
				m_pxAttackInfo^.GetResult()="allcator not running";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;
		
		elseif(m_sState=="running")then
			if(!UpdateFighters())then
				m_pxAttackInfo^.GetResult()="all fighters are dead!";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;
			if(CheckForEnemy(m_vItemPos))then
				m_pxAttackInfo^.GetResult()="area is to dangerous!";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			else
				var int i, iC = m_xFighters.NumEntries();
				for(i=0)cond(i<iC)iter(i++)do
					m_pxSensor^.ExecuteGamePlayCommand(m_xFighters[i].GetHandle(), "PickUp", m_xEnemies[0].GetHandle(), m_vItemPos, "");
				endfor;
				m_iTimer = 0;
				m_sState="checking";
			endif;
		
		elseif(m_sState=="checking")then
			if(!UpdateFighters())then
				m_pxAttackInfo^.GetResult()="all targets to protect are dead!";
				m_pxAttackInfo^.NotifyOnFailed();
				CheckForEnemy(m_vItemPos);
				Deactivate();
				return;
			endif;
			
			var int i, iC = m_xFighters.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
				var string sItem = m_xFighters[i].GetAttribValue("inventory_item_name");
				if(sItem == m_sItemName)then
					m_vSafeSpot = m_pxSensor^.GetStartLocation();
					m_sState="running_back";
				endif;				
				if((sItem=="")&&(m_iCounter>=15)&&m_xFighters[i].GetCurrentTask()=="Idle")then
					m_vSafeSpot = m_pxSensor^.GetStartLocation();
					m_sState="running_back";
					m_iCounter=0;
				endif;
				m_iCounter++;			
			endfor;
			
			m_iTimer++;
			if(m_sState!="running_back" && m_iTimer>30)then
				m_sState="running";
			endif;
		
		elseif(m_sState=="running_back")then
			var int i, iC = m_xFighters.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
				if(m_xFighters[i].IsValid())then
					m_pxSensor^.ExecuteGamePlayCommand(m_xFighters[i].GetHandle(), "Action", -1, m_vSafeSpot, "/Walk");
				endif;
			endfor;
			m_sState = "is_home";
		
		elseif(m_sState=="is_home")then
			if(!UpdateFighters())then
				m_pxAttackInfo^.GetResult()="all targets to protect are dead!";
				m_pxAttackInfo^.NotifyOnFailed();
				CheckForEnemy(m_vItemPos);
				Deactivate();
				return;
			endif;
			if((m_vSafeSpot-m_vFightersPos).Abs2S()<900.0)then
				m_pxAttackInfo^.NotifyOnSucceeded();
				Deactivate();
				return;
			endif;
		endif;	
	endproc;
	
	
	///CheckPathToBuildPlace
	proc bool CheckPathToBuildPlace()
		if(m_pxBrain==null)then return true; endif;
		if(m_pxSensor==null)then return true; endif;
		
		var CAiPathPtr pxPath;
		var vec3 vStartLoc=m_pxSensor^.GetOutpost(m_iOutpostId).GetWorldPos();
		var bool bNoPathFound=false;
		var bool bFoundEnemy;

		
		var real fDist=((vStartLoc-m_vItemPos).Abs2S())/100.0;	
		if(fDist<=60.00)then return true; endif;	
			
		pxPath = m_pxSensor^.CalcPath(vStartLoc, m_vItemPos, false, false);
		
		if(pxPath==null)then
			bNoPathFound=true;
		else
			if(pxPath.GetPath()^.NumEntries()<=0)then
				bNoPathFound=true;
			else
				var vec3 vFoundDest=pxPath.GetPath()^.Get(pxPath.GetPath()^.NumEntries() - 1);	
				if((m_vItemPos - vFoundDest).Abs()>0.2)then
					bNoPathFound=true;
				endif;
			endif;
		endif;
		
		if(bNoPathFound)then
			return false;		
		else
			if(pxPath==null)then return false; endif;
			
			var CAiPathObjInfo 			xPathInfoList;
			var CAiPathObjInfo.CSpot 	xSpot;
			
			if(pxPath.GetPath()^.ComputeLength()>=60.0)then return true; endif;
			xPathInfoList.Clear();
			
			bFoundEnemy=pxPath.GetPath()^.CalcPathInfo(xPathInfoList, m_iPlayerID, 20.0);
			var int i, iC=xPathInfoList.NumEntries();	
			if(iC<=0)then return true; endif;
		
			RequestPestPatrol(xPathInfoList.m_vMaxThreatPos);
			return false;
		endif;
	endproc;
	
	
	///CheckForEnemy
	proc bool CheckForEnemy(vec3 p_vPos)
		if(m_pxSensor==null)then return false; endif;
		m_bEnemyIsThere=false;
		
		var CAiObjWrapList xList, xEvilList;
		var CAiObjQuery xQuery;
		xList.Clear();
		xEvilList.Clear();
		
		xQuery.AddMyEnemiesToSearch(m_iPlayerID, true);
		xQuery.SetOwner(-1, true);
		xQuery.SetType("ANML");
		xQuery.SetType("BLDG", true);
		xQuery.SetType("VHCL", true);
		xQuery.SetType("CHTR", true);
		xQuery.SetType("NEST", true);
		xQuery.RegionCircle(p_vPos, 60.0);
		xQuery.SetSorting(m_pxSensor^.GetStartLocation(), 1);
		xQuery.Execute(xList);
		
		var int i, iC=xList.Validate();
		
		for(i=0)cond(i<iC)iter(i++)do
			if(xList[i].GetOwner()!=(-1))then
				xEvilList.AddEntry(xList[i]);
			else			
				if((xList[i].GetType())!="ANML"&&(xList[i].GetType()!="NEST"))then continue; endif;
				if(!xList[i].IsHostile())then continue; endif;
				if(!xList[i].IsVisible(m_iPlayerID))then continue; endif;
				xEvilList.AddEntry(xList[i]);
			endif;
		endfor;
		
		if(xEvilList.NumEntries()>0)then
			if(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain)<3)then
				m_bEnemyIsThere=true;
			else	
				RequestPestPatrol(xList[0].GetPos());
				m_bEnemyIsThere=true;
			endif;	
		endif;

		return m_bEnemyIsThere;	
	endproc;
	
	
	///RequestPestPatrol
	proc bool RequestPestPatrol(vec3 p_vPos)
		if(m_pxBrain==null) then return false; endif;
		var bool bSucceed=false;
		var ^CAiModuleFightDefault pxFM=cast<CAiModuleFightDefault>(m_pxBrain^.GetFightModule());
		if(pxFM==null)then return false; endif;		
		
		if(pxFM^.RequestPestPatrol(p_vPos))then bSucceed=true; endif;
		return bSucceed;
	endproc;
	
	
	///EvtRequestAccepted
	export proc void EvtRequestAccepted(^CAiRequestInfo p_pxInfo)
		if(p_pxInfo^.GetType()=="ATCK")then
			var ^CAiAttackInfo pxAtckInfo=cast<CAiAttackInfo>(p_pxInfo);
		endif;
	endproc;


	///EvtRequestRejected
	export proc void EvtRequestRejected(^CAiRequestInfo p_pxInfo)
		if(p_pxInfo^.GetType()=="ATCK")then
			var ^CAiAttackInfo pxAtckInfo=cast<CAiAttackInfo>(p_pxInfo);
		endif;
	endproc;


	///EvtRequestFailed
	export proc void EvtRequestFailed(^CAiRequestInfo p_pxInfo)
		if(p_pxInfo^.GetType()=="ATCK")then
			var ^CAiAttackInfo pxAtckInfo=cast<CAiAttackInfo>(p_pxInfo);
		endif;
	endproc;
	
	
	///EvtRequestSucceeded
	export proc void EvtRequestSucceeded(^CAiRequestInfo p_pxInfo)		
		var CAiObjWrapList xUnits;
		if(p_pxInfo^.GetType()=="ATCK")then
			var ^CAiAttackInfo pxAtckInfo=cast<CAiAttackInfo>(p_pxInfo);
		endif;
	endproc;

endclass;
