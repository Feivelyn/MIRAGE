class CAiGoalAttackShips inherit CAiGoalGeneralAttack

	var CAiObjWrap			m_xLastEnemy;
	var string					m_sArmy;
	var bool						m_bSpawn;
	var bool						m_bIgnoreLocation;
	var bool						m_bAttackOnWay;
	var vec3						m_vWayPoint;
	var vec3 						m_vSpawnPos;
	var int							m_iMinRange;
	var	bool						m_bOnce;
	var ^CAiTechTree		m_pxTT;
	var string					m_sTribeName;
	//var bool						m_bWatermap;
	
	///constructor
	export constructor()
	endconstructor;
	
	///destructor
	export destructor()
	enddestructor;
	
	///Init
	export proc bool Init(^CAiBrain p_pxBrain, bool p_bAdvanced)
		super.Init(p_pxBrain);
		if(p_pxBrain==null)then return false; endif;
		
		m_pxBrain = p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return false; endif;
		m_pxTT = ^(m_pxSensor^.GetTechTree());
		if(m_pxTT==null) then return false; endif;
		m_sTribeName = m_pxTT^.GetTribe();
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
//		var int iType = 1+Random.GetInt()%iNumPlayers;
		var int iType = 1;
		
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		SetThinkWait(pxCM^.GetDifficultyInt()+iType);
		
		m_bWatermap=m_pxSensor^.GetWatermap();
		
		m_sState = "new";
		m_xOnEnemiesFound = OnEnemiesFound;
		m_xOnCalculateEnemyValue = OnCalculateValue;
			
		//Henry: extended the list with the new aquatic units
		GetEnemyQuery().AddMyEnemiesToSearch(m_iPlayerID, true);
		GetEnemyQuery().SetClass("hu_harbour");
		GetEnemyQuery().SetClass("hu_transport_ship",true);
		GetEnemyQuery().SetClass("hu_dragon_boat",true);
		GetEnemyQuery().SetClass("hu_fishing_boat",true);
		GetEnemyQuery().SetClass("hu_ram_ship",true);
		
		GetEnemyQuery().SetClass("ninigi_harbour",true);
		GetEnemyQuery().SetClass("ninigi_transport_boat",true);
		GetEnemyQuery().SetClass("ninigi_fire_boat",true);
		GetEnemyQuery().SetClass("ninigi_mine_layer",true);
		GetEnemyQuery().SetClass("ninigi_fishing_boat",true);
		GetEnemyQuery().SetClass("ninigi_muraeno_submarine",true);
		GetEnemyQuery().SetClass("ninigi_rocket_boat",true);
		GetEnemyQuery().SetClass("ninigi_mineship_mine", true);
		GetEnemyQuery().SetClass("ninigi_water_turret", true);
		GetEnemyQuery().SetClass("ninigi_corsair", true);
		GetEnemyQuery().SetClass("ninigi_pirate_boss_ship", true);
//		GetEnemyQuery().SetClass("ninigi_pirate_ship_tail", true);
//		GetEnemyQuery().SetClass("ninigi_pirate_ship_sail", true);
//		GetEnemyQuery().SetClass("ninigi_pirate_ship_row", true);
		
		GetEnemyQuery().SetClass("aje_floating_harbour",true);
		GetEnemyQuery().SetClass("aje_cronosaurus",true);
		GetEnemyQuery().SetClass("aje_mosasaurus",true);
		GetEnemyQuery().SetClass("aje_liopleurodon",true);
		GetEnemyQuery().SetClass("aje_muraenosaurus",true);
		GetEnemyQuery().SetClass("aje_torpedo_turtle",true);
		GetEnemyQuery().SetClass("aje_transport_turtle",true);
		
		GetEnemyQuery().SetClass("seas_carrier",true);
		GetEnemyQuery().SetClass("seas_hovercraft",true);
		GetEnemyQuery().SetClass("seas_submarine",true);
		GetEnemyQuery().SetClass("seas_helicopter",true);
		GetEnemyQuery().SetClass("seas_cannon_turtle",true);
		GetEnemyQuery().SetClass("seas_mosasaurus",true);
		GetEnemyQuery().SetClass("seas_muraenosaurus",true);
		
		GetEnemyQuery().SetSorting(m_pxSensor^.GetStartLocation(), 1);
		var int iAge = Math.Max(Math.Min(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain,m_sTribeName=="Ninigi"),6),2);
		m_sArmy = "ShipAttack_"+iAge.ToString();
//		CMirageAIMgr.Debug("army: "+m_sArmy);
		m_bAttackOnWay = true;
		m_bOnce=false;
		m_vSpawnPos={0.0, 0.0, 0.0};
		return true;
	endproc;

	///OnEnemiesFound
	proc void OnEnemiesFound(ref CAiObjWrapList p_rxList)
		m_xEnemies.CopyFrom(p_rxList);
		if(m_xEnemies.NumEntries()>0)then
			m_xLastEnemy = m_xEnemies[0];
		endif;
	endproc;
	
	///OnCalculateValue
	proc void OnCalculateValue(ref CAiObjWrap p_rxEnemy, ref real p_rfValue)
		if(!p_rxEnemy.IsValid())then return; endif;	
		if(p_rxEnemy.GetType()=="BLDG")then
			if((p_rxEnemy.GetClassName().Find("_harbour")==-1)||(p_rxEnemy.GetClassName().Find("_carrier")==-1))then
				p_rfValue -= 2.0;
			elseif(m_iMinRange<5)then
				p_rfValue -= 999999.0;
			endif;
		endif;
	endproc;
	
	///Set
	export proc void Set(string p_sArmy, bool p_bAttackOnWay, vec3 p_vWayPoint, bool p_bSpawn, vec3 p_vSpawnPos, bool p_bIgnoreLocation, bool p_bAttackOnlyTargets)
		if(p_sArmy!="")then m_sArmy = p_sArmy; endif;
		m_bAttackOnWay = p_bAttackOnWay;
		if(p_vWayPoint!={0.0,0.0,0.0})then m_vWayPoint = p_vWayPoint; endif;
		m_bSpawn = p_bSpawn;
		m_vSpawnPos = p_vSpawnPos;
		m_bIgnoreLocation = p_bIgnoreLocation;
		m_bAttackOnlyTargets = p_bAttackOnlyTargets;
	endproc;

	///Start
	export proc bool Start(^CAiAttackInfo p_pxAttackInfo)
		if(super.Start(p_pxAttackInfo) == false)then
			return false;
		endif;
		if(m_pxBrain==null)then return false; endif;
		m_xAllocator.SetRallyPos(CAiUtilityMgr.Get()^.FindHarbourPos(m_pxBrain));
		return true;
	endproc;

	///Think
	export proc void Think()
		if(m_pxBrain==null)then return; endif;
		if(m_pxSensor==null)then return; endif;
		var ^CAiGoalMinistryOfDefense	pxMOD = GetMOD();
		if(pxMOD == null)then return; endif;
		if(m_sState=="new")then
			if(m_bSpawn)then
				CheckTargetHeight();
				var vec3 vSpawnPos;
				if(m_vSpawnPos != {0.0, 0.0, 0.0})then
					vSpawnPos = m_vSpawnPos;
				else
					var CAiObjQuery xHarbourQuery;
					xHarbourQuery.SetClass("hu_harbour");
					xHarbourQuery.SetClass("ninigi_harbour", true);
					xHarbourQuery.SetClass("aje_floating_harbour", true);
					xHarbourQuery.SetClass("seas_carrier", true);
					xHarbourQuery.SetOwner(m_iPlayerID);
					var CAiObjWrapList xList;
					if(!xHarbourQuery.Execute(xList) || xList.NumEntries()<=0)then
						m_pxAttackInfo^.GetResult()="squad spawning failed, because there was no harbour!";
						m_pxAttackInfo^.NotifyOnFailed();
						Deactivate();
						return;
					endif;
					vSpawnPos = xList[0].GetPos();
				endif;
				if(!SpawnUnits(m_sArmy, vSpawnPos, m_bIgnoreLocation))then
					m_pxAttackInfo^.GetResult()="squad spawning failed!";
					m_pxAttackInfo^.NotifyOnFailed();
					Deactivate();
					return;
				endif;
				SeparateUnits();
				m_xEnemies.CopyFrom(m_pxAttackInfo^.GetTargets());
				m_xOnlyEnemies.CopyFrom(m_pxAttackInfo^.GetTargets());
				StartAllAttacks();
				m_sState = "fighting_walk";
				return;
			endif;
			if(!GetUnits(m_sArmy))then
				m_pxAttackInfo^.GetResult()="squad allocation failed (impossible)";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;
			m_sState="waiting";
		elseif(m_sState=="waiting")then
			if(m_xAllocator.IsRunning())then
				SeparateUnits();
				m_xEnemies.CopyFrom(m_pxAttackInfo^.GetTargets());
				StartAllAttacks();
				m_sState = "fighting_walk";
			elseif(m_xAllocator.IsNotPossible())then
				m_pxAttackInfo^.GetResult()="squad allcation failed!";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			elseif(m_xAllocator.IsAborted())then
				m_pxAttackInfo^.GetResult()="squad dead";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;
		elseif(m_sState=="fighting_walk")then
			if(!UpdateFighters())then
				m_pxAttackInfo^.GetResult()="all fighters are dead!";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;
			if(CheckCompletion())then
				m_pxAttackInfo^.GetResult()="attack succeded!";
				m_pxAttackInfo^.NotifyOnSucceeded();
				var int i, iC = m_xFighters.NumEntries();
				if(iC>0)then
					if(m_xFighters[0].GetCurrentTask()=="Idle")then
						var vec3 vPos=CAiUtilityMgr.Get()^.FindHarbourPos(m_pxBrain);
						if(vPos!={0.0,0.0,0.0})then
							var real fX=vPos.GetX();
							var real fY=vPos.GetY();
							vPos.SetX(fX+0.5);
							vPos.SetY(fY+0.5);	
							var bool bExecute=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, vPos, "/Walk");
							Deactivate();
						else
							var vec3 vSLPos=FindBeachSpot();
							var bool bExecute=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, vSLPos, "/Walk");
							Deactivate();
						endif;
					endif;
				endif;
				return;
			endif;
			if(m_bAttackOnWay && UpdateNearbyEnemies())then
				UpdateAllAttacks();
			endif;
			UpdateSupporters();
			if(m_xEnemies.NumEntries()>0)then
				if(m_xEnemies[0].IsValid())then
					m_vWayPoint=m_xEnemies[0].GetPos();
				endif;
			endif;
			if((m_vWayPoint-m_vFightersPos).AbsSquare()<=1600.0)then
				m_sState="fighting_fight";
			endif;
		elseif(m_sState=="fighting_fight")then
			if(!UpdateFighters())then
				m_pxAttackInfo^.GetResult()="all fighters are dead!";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;
			if(CheckCompletion())then
				m_pxAttackInfo^.GetResult()="attack succeded!";
				m_pxAttackInfo^.NotifyOnSucceeded();
				var int i, iC = m_xFighters.NumEntries();
				if(iC>0)then
					if(m_xFighters[0].GetCurrentTask()=="Idle")then
						var vec3 vPos=CAiUtilityMgr.Get()^.FindHarbourPos(m_pxBrain);
						if(vPos!={0.0,0.0,0.0})then
							var real fX=vPos.GetX();
							var real fY=vPos.GetY();
							vPos.SetX(fX+0.5);
							vPos.SetY(fY+0.5);	
							var bool bExecute=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, vPos, "/Walk");
							Deactivate();
						else
							var vec3 vSLPos=FindBeachSpot();
							var bool bExecute=m_pxSensor^.ExecuteGamePlayCommand(m_xFighters, "Action", -1, vSLPos, "/Walk");
							Deactivate();
						endif;
					endif;
				endif;
				return;
			endif;
			if(UpdateNearbyEnemies())then
				UpdateAllAttacks();
			endif;
			UpdateSupporters();
		endif;
	endproc;
	
	///SepearateUnits
	export proc void SeparateUnits()
		super.SeparateUnits();
		var int i, iC = m_xFighters.NumEntries();
		m_iMinRange = 10000;
		for(i=0)cond(i<iC)iter(i++)do
			var CAiObjWrap xObj = m_xFighters[i];
			if(!xObj.IsValid())then continue; endif;
			var int iRange = xObj.GetAttribValueInt("range");
			if(iRange < m_iMinRange)then
				m_iMinRange = iRange;
			endif;
		endfor;
	endproc;

	///StartAttack
	proc ^CAiTask StartAttack(ref CAiObjWrapList p_rxActors, ref CAiObjWrapList p_rxSupporters)
		var ^CAiTaskAttackObject pxTask=new CAiTaskAttackObject();
		var CAiObjWrapList xList;
		if(!m_bAttackOnWay)then
			pxTask^.Init(this, p_rxActors, p_rxSupporters, xList, m_vAttackPos, true);
		else
			pxTask^.Init(this, p_rxActors, p_rxSupporters, m_xEnemies, m_vAttackPos, true);
		endif;
		AddTask(pxTask);
		m_apxAttackTasks.AddEntry(pxTask);
		pxTask^.Start();
		m_aiUCHistory = 0;
		m_iStartUnitCout = m_xAllocator.GetUnits().NumEntries();
		return pxTask;
	endproc;
	
	///FindBeachSpot
	proc vec3 FindBeachSpot()
		if(m_pxSensor==null)then return {0.0,0.0,0.0}; endif;
		if(m_pxBrain==null)then return {0.0,0.0,0.0}; endif;
		var ^CAiMaps	pxMaps			= ^(m_pxSensor^.GetAiMaps());
		var ^CAiMaps	pxGlobalMaps	= ^(m_pxSensor^.GetGlobalAiMaps());
		var CAiMap		xTmpCostMap;
		var CAiArea		xMaxArea;
		var int			iX, iY;
		var vec3		vSL				= m_pxSensor^.GetStartLocation();
		var int			iIslandId		= m_pxSensor^.ComputeIslandId(vSL);
		var vec3 		vPos;

		CAiArea.Vec3ToArea(vSL, iX, iY);
		xTmpCostMap.Init(pxMaps^.GetMapWidth(), pxMaps^.GetMapHeight(), m_iPlayerID, false);
		xTmpCostMap.AddInfluence(iX, iY, 100.0, 0.0, 10.0);
		xTmpCostMap.OpAdd(0.1);
		xTmpCostMap.MultiplyFast(pxGlobalMaps^.GetAiMap("Coast", m_iPlayerID));
		xTmpCostMap.MultMosaicFast(iIslandId);
		xMaxArea = xTmpCostMap.FindMaxArea();
		if(xTmpCostMap.GetValue(xMaxArea) == 0.0)then
			vPos = vSL;
		else
			vPos = CAiUtilityMgr.Get()^.GetNearestPassablePointInArea(xMaxArea, m_pxSensor);
		endif;
		return vPos;
	endproc;
	
	
	///CheckTargetHeight
	proc void CheckTargetHeight()
		var real fEnemieHeigt, fFighterHeigt;
		var vec3 vEnemiePos, vFighterPos;
		if(m_xEnemies.NumEntries()<=0)then return; endif;
		if(m_xFighters.NumEntries()<=0)then return; endif;
		if(m_xEnemies[0].IsValid()&&m_xFighters[0].IsValid())then
			vEnemiePos=m_xEnemies[0].GetPos();
			vFighterPos=m_xFighters[0].GetPos();
			fEnemieHeigt=vEnemiePos.GetZ();
			fFighterHeigt=vFighterPos.GetZ();
			if((fEnemieHeigt-fFighterHeigt)>(m_xFighters[0].GetAttribValue("range")).ToInt().ToReal())then
				m_pxAttackInfo^.GetResult()="Enemy is too high!";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
			endif;
		endif;
	endproc;

endclass;
