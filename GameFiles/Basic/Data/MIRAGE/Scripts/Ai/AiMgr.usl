class CAiMgr inherit IAiMgr
	var array ^IAiModuleControl			m_apxCurrentControlModule;
	var array ^CAiBrain.ICostFunction	m_apxCostFunctions;
	var string 							m_sEco;
	var string 							m_sDef;
	var string 							m_sFig;
	var bool 							m_bAiAssist;

	///constructor
	export constructor()
		m_apxCurrentControlModule=8;
		m_apxCostFunctions=8;
		Random.Seed();
	endconstructor;

	///destructor
	export destructor()
		CAiWeaponMgr.ShutStatic();
		CAiUtilityMgr.ShutStatic();
		CMirageAIMgr.ShutStatic();
	enddestructor;

	///Init
	export proc void Init()
		var int i;
		for(i=0)cond(i<8)iter(i++)do
			m_apxCurrentControlModule[i]=null;
			m_apxCostFunctions[i]=null;
		endfor;
	endproc;
	
	///Shut
	export proc void Shut()
		var int i;
		for(i=0)cond(i<8)iter(i++)do
			if (m_apxCurrentControlModule[i]!=null)then 
				delete m_apxCurrentControlModule[i];
			endif;
			if(m_apxCostFunctions[i]!= null)then
				delete m_apxCostFunctions[i];
			endif;
		endfor;
	endproc;
	
	///OnLevelLoaded
	export proc void OnLevelLoaded()
	endproc;

	///OnAiBrainCreated
	export proc void OnAiBrainCreated(int p_iPlayerId)
		var ^CAiBrain pxBrain = CAiWrap.GetBrain(p_iPlayerId);
		if (pxBrain==null) then return; endif;
		var string sType=pxBrain^.GetType();
//		CMirageAIMgr.Debug(p_iPlayerId.ToString()+"'s brain full-type: "+sType);
		var array string asAiInfo;
		sType.Split(asAiInfo,"\n",false);
		if(asAiInfo.NumEntries() != 9) then
			asAiInfo=9;
		endif;
		var string sAiType =asAiInfo[0];
		var string sAiTribe =asAiInfo[1];
		var int iAiTeam =asAiInfo[2].ToInt();
		var string sAiName =asAiInfo[3];
		var int iDifficulty = asAiInfo[4].ToInt();
		var string sAssist =asAiInfo[5];
		m_sEco =asAiInfo[6];
		m_sDef =asAiInfo[7];
		m_sFig =asAiInfo[8];
		if(sAssist=="1")then
			m_bAiAssist=true;
		else
			m_bAiAssist=false;
		endif;
		pxBrain^.SetPyramid(new CAIPyramid());
		if((sAiType.Left(3)=="ai_")||(sAiType=="ai"))then
			var string sBehavior = sAiType.Mid(3);
			var ^IAiModuleControl pxCModule = new CAiModuleControlDefault();
			pxBrain^.AddModule(pxCModule);
//			CMirageAIMgr.Debug(p_iPlayerId.ToString()+"'s brain create: "+sBehavior);
			pxCModule^.SetBehavior(sBehavior);
			if(m_bAiAssist)then
				pxCModule^.SetBehavior("AIAssistEco_"+m_sEco);
				pxCModule^.SetBehavior("AIAssistDef_"+m_sDef);
				pxCModule^.SetBehavior("AIAssistFig_"+m_sFig);
			endif;
			m_apxCurrentControlModule[p_iPlayerId] = pxCModule;
			var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(pxBrain^.GetControlModule());
			pxCM^.SetDifficulty(iDifficulty);
			pxCM^.SetTeam(iAiTeam);
			var ^CAiBrain.ICostFunction pxCFunc = new TestCostFunction();
			pxBrain^.SetCostFunction(pxCFunc);
			m_apxCostFunctions[p_iPlayerId] = pxCFunc;
		endif;
	endproc;
endclass;
	
///TestCostFunction
class TestCostFunction inherit CAiBrain.ICostFunction
	
	export proc real CalcUnitCost(CFourCC p_xFourCC, int p_iSize)
		return 1.0;
	endproc;
	
	export proc real CalcTimeCost(real p_fTime)
		return 1.0;
	endproc;
	
	export proc real CalcRiskCost(real p_fRisk)
		return 1.0;
	endproc;
	
endclass;
