class CAIPyramid inherit CAiPyramid

	static var ^CAIPyramid		ms_pxInst;
	var CAiObjWrap						m_xObj;
	var CAiObjWrapList				m_xList;
	
	//constructor
	export constructor()
		ms_pxInst=this;
	endconstructor;
	
	//destructor
	export destructor()
		delete this;
	enddestructor;
	
	//sets object
	export proc void SetObject(CAiObjWrap p_xObj)
		m_xObj=p_xObj;
	endproc;
	
	//called to check if there is a free slot in level fornew character
	export proc bool Check4Level(int p_iLevel)
		if(!CMirageAIMgr.Get().LevelingAllowed())then
			return false;
		endif;
		if(CMirageAIMgr.Get().AllowSupplySystem())then
			return true;
		endif;
		var ^CAiBrain pxBrain = GetBrain();
		var int i, iUnits = GetNumUnits(p_iLevel);
		if(pxBrain != null)then
			var int iVirtualUnits = pxBrain^.GetPlayerAttrib("virtual_units" + p_iLevel.ToString()).ToInt();
			var int iUnitLimit = GetUnitLimit(p_iLevel);
			if((iUnits + iVirtualUnits) < iUnitLimit)then
				return true;
			endif;
		endif;
		return false;
	endproc;
	
	//called to check the actuall allowed number of units per level
	proc int GetMaxUnitsForLevel(int p_iLevel)
		var int iLevel;
		var array string asMaxForLevel;
		var string sMaxUnitsForLevel = GetBlockSlots();
		sMaxUnitsForLevel.Split(asMaxForLevel, "/", false);
		var int i,iC=asMaxForLevel.NumEntries();
		if(p_iLevel==0)then
			return iLevel=asMaxForLevel[0].ToInt();
		elseif(p_iLevel==1)then
			return iLevel=asMaxForLevel[1].ToInt();
		elseif(p_iLevel==2)then
			return iLevel=asMaxForLevel[2].ToInt();
		elseif(p_iLevel==3)then
			return iLevel=asMaxForLevel[3].ToInt();
		elseif(p_iLevel==4)then
			return iLevel=asMaxForLevel[4].ToInt();
		else
			return GetUnitLimit(p_iLevel);
		endif;
	endproc;
	
	//called to check UnitLimit
	export proc bool Check4Limit()
		var ^CAiBrain pxBrain = GetBrain();
		if(pxBrain!=null)then
			if(CMirageAIMgr.Get().AllowSupplySystem())then
				var int iSupply = pxBrain^.GetPlayerAttrib("supply").ToInt();
				var int iMaxSupply = pxBrain^.GetPlayerAttrib("max_supply").ToInt();
				var int iVirtualSupply = pxBrain^.GetPlayerAttrib("virtual_supply").ToInt();
				if((iSupply + iVirtualSupply)<iMaxSupply)then
					return true;
				endif;
				return false;
			else
				var int iUnits = pxBrain^.GetPlayerAttrib("units").ToInt();
				var int iMaxUnits = pxBrain^.GetPlayerAttrib("max_units").ToInt();
				var int iVirtualUnits = 0;
				var int i;
				for(i = 0)cond(i < 5)iter(i++)do
					iVirtualUnits += pxBrain^.GetPlayerAttrib("virtual_units"+i.ToString()).ToInt();
				endfor;
				if((iUnits + iVirtualUnits)<iMaxUnits)then
					return true;
				endif;
				return false;
			endif;
		endif;
		return false;
	endproc;
	
	//called to check how many characters of one caste are present in a level
	export proc int Check4LevelAndCaste(int p_iLevel, string p_sCaste)
		var int iNumUnits = 0;
		var CAiObjWrapList xObjList;
		var CAiObjQuery xObjQuery;
		var CFourCC xTypeId = "CHTR";
		var ^CAiBrain pxBrain = GetBrain();
		xObjQuery.SetType(xTypeId);
		xObjQuery.SetOwner(pxBrain^.GetPlayerId());
		xObjQuery.Execute(xObjList);
		var int i, iC = xObjList.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var CAiObjWrap xObj = xObjList[i];
			if((xObj.GetAttribValue("caste")==p_sCaste)&&(xObj.GetAttribValue("level").ToInt()==p_iLevel))then
				iNumUnits++;
			endif;
		endfor;
		return iNumUnits;
	endproc;
	
	//tests all levels from p_iLevel to Level 4 if there is a p_sCaste char
	export proc int Check4UpperLevelsAndCaste(int p_iLevel, string p_sCaste)
		var int iNumUnits = 0;
		var CAiObjWrapList xObjList;
		var CAiObjQuery xObjQuery;
		var CFourCC xTypeId = "CHTR";
		var ^CAiBrain pxBrain = GetBrain();
		xObjQuery.SetType(xTypeId);
		xObjQuery.SetOwner(pxBrain^.GetPlayerId());
		xObjQuery.SetAttribPos("caste", p_sCaste);
		var int i;
		for(i = p_iLevel)cond(i < 5)iter(i++)do
			xObjQuery.SetAttribPos("level", p_iLevel.ToString());
		endfor;
		xObjQuery.Execute(xObjList);
		return xObjList.NumEntries();
	endproc;
	
	//called to check if character can level up
	export proc void LevelUp()
		var CAiObjWrapList xObjList;
		var CAiObjQuery xObjQuery;
		var CFourCC xTypeId = "CHTR";
		var ^CAiBrain pxBrain = GetBrain();
		xObjQuery.SetType(xTypeId);
		xObjQuery.SetOwner(pxBrain^.GetPlayerId());
		xObjQuery.Execute(xObjList); 
		var int i, iC = xObjList.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var CAiObjWrap xObj = xObjList[i];
			var string sCaste = xObj.GetAttribValue("caste");
			var int iLevel = xObj.GetAttribValue("level").ToInt();
			var int iExp = xObj.GetAttribValue("experience").ToInt();
			var int iTargetLevel = iLevel+1;
			if(iLevel<4)then
				if(pxBrain!=null)then
					var int iMin = pxBrain^.GetPlayerAttrib("xp_min_"+iTargetLevel.ToString()).ToInt();
					var int iFoodcost = pxBrain^.GetPlayerAttrib("foodcost_lvl_"+iTargetLevel.ToString()).ToInt();
					var int iFood = pxBrain^.GetPlayerAttrib("food").ToInt();
					if((iExp >= iMin)&&(iFood>=iFoodcost))then
						if(Check4Level(iTargetLevel))then
							SetLevel(xObj, iTargetLevel);
						endif;
					endif;
				endif;
			endif;
		endfor;
	endproc;
	
	//called to check if character can level up
	export proc void LevelDown(CAiObjWrap p_xObj)
		if(p_xObj.IsValid())then
			var string sCaste  = p_xObj.GetAttribValue("caste");
			var int iLevel = p_xObj.GetAttribValue("level").ToInt();
			var int iTargetLevel = iLevel -1;
			if(iTargetLevel>=0)then	
				if(Check4Level(iTargetLevel))then
					SetLevel(p_xObj, iTargetLevel);
				endif;
			endif;
		endif;
	endproc;
	
	//called to level down a unit of a specific level
	export proc void LevelDown(int p_iSrcLevel, bool p_bHoldTrinity)
		if((p_iSrcLevel < 0) || (p_iSrcLevel > 4))then
			return;
		endif;
		var int iObjIndex = 0;
		var CAiObjWrapList xObjList;
		var CAiObjQuery xObjQuery;
		var CFourCC xTypeId = "CHTR";
		var ^CAiBrain pxBrain = GetBrain();
		xObjQuery.SetType(xTypeId);
		xObjQuery.SetOwner(pxBrain^.GetPlayerId());
		xObjQuery.SetAttribPos("level", p_iSrcLevel.ToString());
		xObjQuery.Execute(xObjList); 
		var int i;
		var int iC = xObjList.NumEntries();
		if((p_bHoldTrinity == true) && (p_iSrcLevel == 3))then
			var int iCNat = 0;
			var int iCRes = 0;
			var int iCTec = 0;
			var CAiObjWrapList xTrinObjList;
			var CAiObjQuery xTrinObjQuery;
			xTrinObjQuery.SetType(xTypeId);
			xTrinObjQuery.SetOwner(pxBrain^.GetPlayerId());
			xTrinObjQuery.SetAttribPos("level", "4");
			xTrinObjQuery.Execute(xTrinObjList); 
			var int iTrinObjC = xTrinObjList.NumEntries();
			for(i = 0)cond(i < iTrinObjC)iter(i++)do
				if(xTrinObjList[i].GetAttribValue("caste") == "nat")then
					++iCNat;
				elseif(xTrinObjList[i].GetAttribValue("caste") == "res")then
					++iCRes;
				elseif(xTrinObjList[i].GetAttribValue("caste") == "tec")then
					++iCTec;
				endif;
			endfor;
			for(i = 0)cond(i < iC)iter(i++)do
				if(xObjList[i].GetAttribValue("caste") == "nat")then
					if(++iCNat > 1)then
						iObjIndex = i;
						break;
					endif;
				elseif(xObjList[i].GetAttribValue("caste") == "res")then
					if(++iCRes > 1)then
						iObjIndex = i;
						break;
					endif;
				elseif(xObjList[i].GetAttribValue("caste") == "tec")then
					if(++iCTec > 1)then
						iObjIndex = i;
						break;
					endif;
				endif;
			endfor;
		endif;
		if(iC > 0)then
			if(p_iSrcLevel == 0)then
				KillUnit(xObjList[iObjIndex]);
				return;
			endif;
			if(Check4Level(p_iSrcLevel - 1) == false)then
				LevelDown(p_iSrcLevel - 1, p_bHoldTrinity);
			endif;
			var string sCaste = xObjList[iObjIndex].GetAttribValue("caste");
			var string sLevel = xObjList[iObjIndex].GetAttribValue("level");
			SetLevel(xObjList[iObjIndex], p_iSrcLevel - 1);
		endif;
	endproc;
	
	//called to swap level to two chars
	export proc bool LevelTargetChar(string p_sTargetCaste, int p_iTargetLevel)
		var CAiObjWrapList xObjList;
		var CAiObjQuery xObjQuery;
		var CFourCC xTypeId = "CHTR";
		var ^CAiBrain pxBrain = GetBrain();
		xObjQuery.SetType(xTypeId);
		xObjQuery.SetOwner(pxBrain^.GetPlayerId());
		xObjQuery.Execute(xObjList); 
		var int i, iC = xObjList.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var CAiObjWrap xObj = xObjList[i];
			if(((p_sTargetCaste == "") || (xObj.GetAttribValue("caste")==p_sTargetCaste))&&(xObj.GetAttribValue("level").ToInt()==p_iTargetLevel-1))then
				var ^CAiBrain pxBrain = GetBrain();
				if(pxBrain!=null)then
					var int iMin = pxBrain^.GetPlayerAttrib("xp_min_"+p_iTargetLevel.ToString()).ToInt();
					var int iFoodcost = pxBrain^.GetPlayerAttrib("foodcost_lvl_"+p_iTargetLevel.ToString()).ToInt();
					var int iFood = pxBrain^.GetPlayerAttrib("food").ToInt();
					var int iExp = xObj.GetAttribValue("experience").ToInt();
					if((iExp >= iMin)&&(iFood>iFoodcost))then
						if(Check4Level(p_iTargetLevel))then
							SetLevel(xObj, p_iTargetLevel);
							return true;
						else
							LevelDown(p_iTargetLevel, true);
						endif;
					endif;
				endif;
			endif;
		endfor;
		return false;
	endproc;
	
endclass;
