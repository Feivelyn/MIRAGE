class CAiTaskGuardUnits inherit CAiTask

	var ^CAiBrain		m_pxBrain;
	var ^CAiSensor		m_pxSensor;
	var CAiObjWrapList	m_xActors;
	var CAiObjWrapList	m_xTargets;
	var vec3			m_vTargetsPos;
	var CAiObjWrapList	m_xEnemies;
	var CAiObjWrap		m_xCurrentEnemy;
	var int				m_iPlayerID;
	var string			m_sPlayerID;


	///Init
	export proc void Init(^CAiGoal p_pxGoal,CAiObjWrapList p_xActors,ref CAiObjWrapList p_rxTargets, ref CAiObjWrapList p_rxEnemies)
		super.Init(p_pxGoal);	
		if(p_pxGoal==null)then return; endif;
				
		m_pxBrain = GetGoal()^.GetAiBrain(); 
		if(m_pxBrain==null)then return; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		
//		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
//		var int iType = 1+Random.GetInt()%iNumPlayers;
		var int iType = 1;
		
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		SetThinkWait(pxCM^.GetDifficultyInt()+iType);
		
		m_xActors.CopyFrom(p_xActors);
		m_xTargets.CopyFrom(p_rxTargets);
		m_xEnemies.CopyFrom(p_rxEnemies);
	endproc;
	

	///Start
	export proc bool Start()
		super.Start();
		SetRunning();
		return true;
	endproc;
	

	///Shut
	export proc void Shut()
		Abort();
	endproc;
	
	
	///GetActor
	export proc ref CAiObjWrapList GetActors()
		return m_xActors;
	endproc;


	///SetEnemies
	export proc void SetEnemies(ref CAiObjWrapList p_rxList)
		if(m_xActors.NumEntries()<=0)then return; endif;
		if(!m_xActors[0].IsValid())then return; endif;		
		var bool bUpdate = true;
		if(m_xEnemies.NumEntries()>0 && p_rxList.NumEntries()>0)then
			if(m_xEnemies[0].IsSameAs(p_rxList[0]))then
				if(m_xActors[0].GetAttribValueInt("CurEnemy")==p_rxList[0].GetHandle())then
					bUpdate = false;
				endif;
			endif;
		endif;
		m_xEnemies.CopyFrom(p_rxList);
		if(bUpdate)then
			Think();
		endif;
	endproc;
	

	///Think
	export proc void Think()
		if(IsRunning())then
			if(m_xActors.NumEntries()<=0)then 
				Abort();
				return; 
			endif;
			
			if(!m_xActors[0].IsValid())then
				Abort();
				return;
			endif;
			
			if(!UpdateCurrentTargets())then
				SetCompleted();
				return;
			endif;
			
			if(CheckDistance() && UpdateCurrentEnemies())then
				if(m_xActors[0].GetAttribValueInt("CurEnemy")!=m_xEnemies[0].GetHandle())then
					StartAttack(m_xEnemies[0]);
				endif;
			else			
				if(m_pxSensor!=null)then 
					m_pxSensor^.ExecuteGamePlayCommand(m_xActors, "Action", m_xTargets[0].GetHandle(), m_vTargetsPos, "/Walk");
				endif;
			endif;
		endif;
	endproc;
	
	
	///CheckDistance
	proc bool CheckDistance()
		if(m_xActors.NumEntries()<=0)then return false; endif;
		return (m_vTargetsPos - m_xActors[0].GetPos()).Abs2S() <= 900.0;
	endproc;
	
	
	///UpdateCurrentTargets
	proc bool UpdateCurrentTargets()
		var int i, iC = m_xTargets.NumEntries();
		var vec3 vPos;
		for(i=0)cond(i<iC)iter(i++)do
			if(!m_xTargets[i].IsValid())then
				m_xTargets.RemEntry(m_xTargets[i]);
				i--; iC--;
				continue;
			endif;
			vPos += m_xTargets[i].GetPos();
		endfor;
		if(iC==0)then return false; endif;
		m_vTargetsPos = vPos / iC.ToReal();
		return true;
	endproc;
	
	
	///UpdateCurrentEnemies
	proc bool UpdateCurrentEnemies()
		var int i, iC = m_xEnemies.NumEntries();
		var vec3 vPos;
		for(i=0)cond(i<iC)iter(i++)do
			if(!m_xEnemies[i].IsValid())then
				m_xEnemies.RemEntry(m_xEnemies[i]);
				i--; iC--;
				continue;
			endif;
		endfor;
		if(iC==0)then return false; endif;
		return true;
	endproc;
	
	
	///StartAttack
	proc void StartAttack(CAiObjWrap p_xEnemy)
		m_xCurrentEnemy = p_xEnemy;
		if(m_pxSensor!=null)then
			m_pxSensor^.ExecuteGamePlayCommand(m_xActors, "Action", p_xEnemy.GetHandle(), p_xEnemy.GetPos(), "/AggressiveTarget");
		endif;
	endproc;
	
endclass;
