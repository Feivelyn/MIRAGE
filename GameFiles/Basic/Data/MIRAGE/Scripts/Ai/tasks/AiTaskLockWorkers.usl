///CAiTaskAttackWalls
class CAiTaskLockWorkers inherit CAiTask

	var CAiObjWrapList 	m_xUnits;
	var vec3			m_vBasePos;

	///contsructor
	export constructor()
	endconstructor;
	
	
	///destructor
	export destructor()
	enddestructor;
	
	
	///called on start
	export proc bool Start()
		SetPriority(10000.0);
		super.Start();
		return true;
	endproc;
	

	///called to shut
	export proc void Shut()
		Abort();
		UnlockExternal();
	endproc;


	///UnlockExternal
	proc void UnlockExternal()
		var int i,iC=m_xUnits.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if(m_xUnits[i].IsValid())then
				GetAiAllocationMgr()^.ExternalUnlock(m_xUnits[i]);
			endif;
		endfor;
		m_xUnits.Clear();
	endproc;
	
	
	///SetBase
	export proc void SetBase(vec3 p_vBasePos)
		m_vBasePos = p_vBasePos;
	endproc;
	
	
	///GetUnits
	export proc ref CAiObjWrapList GetUnits()
		return m_xUnits;
	endproc;
	
	
	///LockWorkers
	export proc void LockWorkers(CAiObjWrapList p_xUnits)
		m_xUnits.CopyFrom(p_xUnits);
		var int i, iC = m_xUnits.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			GetAiAllocationMgr()^.ExternalLock(m_xUnits[i]);
		endfor;
	endproc;
	
	
	///UnlockWorkers
	export proc void UnlockWorker(CAiObjWrap p_xUnit)
		if(m_xUnits.FindEntry(p_xUnit)!=-1)then
			m_xUnits.RemEntry(p_xUnit);
			GetAiAllocationMgr()^.ExternalUnlock(p_xUnit);
		endif;
	endproc;
	
	
	//called when thinking
	export proc void Think()
	endproc;
endclass;