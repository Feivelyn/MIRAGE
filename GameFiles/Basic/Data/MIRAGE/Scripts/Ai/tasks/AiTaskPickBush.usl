class CAiTaskPickBush inherit CAiTaskGetResource

	var CAiObjWrapList	m_xList;
	var real			m_fMaxAllowedFoodDistance;
	var int				m_iMaxFood;


	///Init
	export proc void Init(^CAiGoal p_pxGoal)
		super.Init(p_pxGoal);
		if(p_pxGoal==null)then return; endif;
				
		m_pxBrain = p_pxGoal^.GetAiBrain(); 
		if(m_pxBrain==null)then return; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();	
		m_iMaxFood=0;
		
		m_fMaxAllowedFoodDistance = 500.0;
	endproc;


	///CalculateStartCost
	export proc real CalculateStartCost()
		if(m_pxSensor==null) then return 1.0; endif;
		if(m_pxBrain==null)then return 1.0; endif;
		
		var ^CAiBrain.ICostFunction pxCostFunc = m_pxBrain^.GetCostFunction();
		var real fCost = 1.0;
		var ^CAiMaps pxMaps = ^(m_pxSensor^.GetAiMaps());
		var ^CAiMaps pxGlobalMaps = ^(m_pxSensor^.GetGlobalAiMaps());

		var ^CAiMap		pxCostMap;
		var ^CAiMap		pxInflBuildMap = ^(pxMaps^.GetAiMap("InflBuild", m_iPlayerID));
		var CAiMap		xGenInflMap;
		var CAiMap		xRangeMap;

		xRangeMap.Init(pxMaps^.GetMapWidth(), pxMaps^.GetMapHeight(), m_iPlayerID);
		xRangeMap.ClearToFast(0.0);

		var vec3	vOPPos		= m_pxSensor^.GetOutpost(m_iOutpostId).GetWorldPos();
		var int		iOPX;
		var int		iOPY;

		CAiArea.Vec3ToArea(vOPPos, iOPX, iOPY);
		xRangeMap.AddInfluenceFast(iOPX, iOPY, 5.0, 0.0, 1.0);
		var CAiArea		xMaxInflBuildArea = pxInflBuildMap^.FindMaxArea();

        if(pxInflBuildMap^.GetValue(xMaxInflBuildArea) > 0.0) then
			xGenInflMap.CopyFrom(pxInflBuildMap^);
		else
			xGenInflMap.CopyFrom(pxMaps^.GetAiMap("Infl", m_iPlayerID));
		endif;
		pxCostMap=^(pxMaps^.GetAiMap("FRUI",m_iPlayerID));

		pxCostMap^.CopyFromFast(pxGlobalMaps^.GetAiMap("FRUI", m_iPlayerID));
		pxCostMap^.MultiplyFast(xGenInflMap);
		pxCostMap^.MultiplyFast(xRangeMap);
		pxCostMap^.MultiplyFast(m_xInvalidMap);
		pxCostMap^.MultMosaicFast(vOPPos);
		if((pxCostMap^.IsDirty())||(m_xInvalidMap.IsDirty()))then
			pxCostMap^.UpdateBitmap();
			pxCostMap^.SetDirty(false);
			m_xInvalidMap.SetDirty(false);
		endif;

		m_xMaxArea = pxCostMap^.FindMaxArea();

		if (pxCostMap^.GetValue(m_xMaxArea) == 0.0) then
			fCost = 99999999.0f;

			var ^CAiModuleControlDefault pxCM = cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
			if(pxCM != null)then	
				pxCM^.GetCheatMgr().SpawnResources("food", 10);
			endif;
			SetImpossible();
		endif;		
		return fCost;
	endproc;


	///EvtAllocationComplete
	export proc void EvtAllocationComplete(^CAiAllocation p_pxAllocation)
		super.EvtAllocationComplete(p_pxAllocation);
		if(IsAborted())then return; endif;
		var vec3 vDist;
		var real fDist;

		if(p_pxAllocation^.GetNumSubjects() > 0)then
			vDist = p_pxAllocation^.GetTarget() - p_pxAllocation^.GetSubject(0).GetPos();
		else
			if(GetSolution()!=null)then
				GetSolution()^.DebugDump();
			endif;
		endif;
		fDist = vDist.Abs();
		if(fDist > m_fMaxAllowedFoodDistance)then
			var ^CAiSolution pxSolution = GetSolution();

			if(pxSolution != null)then
				pxSolution^.IncreaseCostModifier(999999.0f);
			endif;
		endif;
	endproc;


	///Start
	export proc bool Start()
		SetStarted();
		var CFourCC xResource = "FRUI";
		var CAiObjQuery xQuery;

		xQuery.SetType(xResource);
		xQuery.RegionArea(m_xMaxArea);
		
		if(!xQuery.Execute(m_xList))then
			Abort();
			return false;
		else
			if(m_xList[0].IsValid())then
				if(!CAiUtilityMgr.Get()^.CheckForEnemy(m_pxBrain, m_xList[0].GetPos()))then return false; endif;
			endif;
		endif;
		
		var bool bSuccess = TryAllocate(GetSolution(), m_iOutpostId, 10);
		if(bSuccess==false)then return false; endif;
		
		GetAllocation()^.SetTarget(m_xList[0].GetPos());
			
		SetThinkWait(6);
		return true;
	endproc;

	
	///ExecuteSolution
	export proc void ExecuteSolution(int p_iObject, vec3 p_vPos)
		if(m_pxSensor==null)then return; endif;
		var int iSubjectHandle=m_xSubjects[0].GetHandle();
		var int iObjectHandle=-1;
		if(p_iObject>=0)then
			iObjectHandle=m_xObjects[p_iObject].GetHandle();
		endif;
		m_pxSensor^.AddCheckpoint(this,0,"atto:"+iSubjectHandle.ToString()+",CurTask,==,Idle",0.0);
		m_pxSensor^.AddCheckpoint(this,100,"atto:"+iSubjectHandle.ToString()+",CurTask,==,GetFood",0.0);
		if(m_xList[0].IsValid() == false)then
			Abort();
			return;
		endif;
		
		m_pxSensor^.ExecuteGamePlayCommand(m_xLockedObjs, GetSolution()^.GetGPCmd(), m_xList[0].GetHandle(), p_vPos, GetSolution()^.GetAdditionalAttribs());
	endproc;
	
	///EvtRequestAccepted
	export proc void EvtRequestAccepted(^CAiRequestInfo p_pxInfo)
		if(p_pxInfo^.GetType()=="ATCK")then
			var ^CAiAttackInfo pxAtckInfo=cast<CAiAttackInfo>(p_pxInfo);
		endif;
	endproc;


	///EvtRequestRejected
	export proc void EvtRequestRejected(^CAiRequestInfo p_pxInfo)
		if(p_pxInfo^.GetType()=="ATCK")then
			var ^CAiAttackInfo pxAtckInfo=cast<CAiAttackInfo>(p_pxInfo);
		endif;
	endproc;


	///EvtRequestFailed
	export proc void EvtRequestFailed(^CAiRequestInfo p_pxInfo)
		if(p_pxInfo^.GetType()=="ATCK")then
			var ^CAiAttackInfo pxAtckInfo=cast<CAiAttackInfo>(p_pxInfo);
		endif;
	endproc;
	
	
	///EvtRequestSucceeded
	export proc void EvtRequestSucceeded(^CAiRequestInfo p_pxInfo)
		var CAiObjWrapList xUnits;
		if(p_pxInfo^.GetType()=="ATCK")then
			var ^CAiAttackInfo pxAtckInfo=cast<CAiAttackInfo>(p_pxInfo);
		endif;
	endproc;
	
	
	///Think
	proc void Think()
		MaxInstanceCount();
	endproc;
	
	
	///CheckMaxInstanceCount
	proc void MaxInstanceCount();
		var ^CAiTechTree pxTT=^(m_pxSensor^.GetTechTree());
		var ^CAiNodeInstance pxNI;
		pxNI = pxTT^.GetNodeInstanceFromPartialName("food");
		if(pxNI!=null)then
			if(pxNI^.GetInstanceCount() >= pxNI^.GetMaxInstanceCount())then
				if(m_xLockedObjs.NumEntries()>0)then
					m_pxSensor^.ExecuteGamePlayCommand(m_xLockedObjs, "Action", -1 , {0.0,0.0,0.0}, "/Stop");
					CAiUtilityMgr.Get()^.LockExternal(this, m_xLockedObjs);
					CAiUtilityMgr.Get()^.UnlockExternal(this, m_xLockedObjs);
					Abort();
					Shut();
				endif;
			endif;
		endif;
	endproc;
	
endclass;
