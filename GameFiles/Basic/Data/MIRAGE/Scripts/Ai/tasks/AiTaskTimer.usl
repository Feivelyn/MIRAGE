/*
	This task implements a Timer whith its Think function and a callback.
*/
class CAiTaskTimer inherit CAiTask

	var bool	m_bRepeat;
	var bool	m_bOn;
	var int		m_iTimerInit;
	var int		m_iTimer;
	var int		m_iTimerId;
		
	export var procref <void, int> m_xOnTimeAlert;


	export destructor()
	enddestructor;


	export proc void Init(^CAiGoal p_pxGoal)
		super.Init(p_pxGoal);
		m_iTimer = 0;
		m_iTimerInit = 0;
		m_iTimerId = 0;
		m_bRepeat = false;
		m_bOn = false;
		SetStarted();
	endproc;


	export proc void Shut()
		Abort();
	endproc;

	
	export proc int GetId()
		return m_iTimerId;
	endproc;

	
	export proc bool IsOn()
		return m_bOn;
	endproc; 

	
	export proc void Set(int p_iTimerId, int p_iTimerInit, bool p_bRepeat)
		m_iTimerId	= p_iTimerId;
		m_iTimer	= m_iTimerInit = p_iTimerInit * 5;
		m_bOn		= false;
		m_bRepeat	= p_bRepeat;
	endproc;


	export proc void Stop()
		m_iTimer	= m_iTimerInit;
		m_bOn		= false;
	endproc;


	export proc void Pause()
		m_bOn		= false;
	endproc;


	export proc bool Start()
		m_bOn		= true;
		return true;
	endproc;


	export proc void Think()
		if(m_bOn == false)then
			return;
		endif;
		m_iTimer--;
		if(m_iTimer <= 0)then
			if(m_xOnTimeAlert.IsNull() == false)then
				m_xOnTimeAlert.Call(m_iTimerId);
			endif;
			m_iTimer = m_iTimerInit;
			m_bOn = m_bRepeat;
		endif;
	endproc;

endclass;
