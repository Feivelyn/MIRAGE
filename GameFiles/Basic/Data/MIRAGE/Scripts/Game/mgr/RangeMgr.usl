class CRangeMgr
	
	var ^CObjMgr								m_pxObjMgr;
	var ^CObjSelection					m_pxSelection;
	var CObjList								m_xLastSelection;
	var int											m_iRangeMarkersCreationTime;
	var bool										m_bRangeMarkerIsDeleted;
	var array ^CRangeMgrsMarker	m_apxRangeMarker;
	
	export constructor()
		m_pxObjMgr = ^(CClientWrap.GetObjMgr());
		m_pxSelection = ^(CClientWrap.GetSelection());
		m_bRangeMarkerIsDeleted = false;
	endconstructor;
	
	export proc bool ClearAll()
		var int i, iC = m_pxSelection^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			m_pxObjMgr^.DeleteRangeMarkersForObj(m_pxSelection^[i].GetObj());
		endfor;
		m_xLastSelection.Clear();
		return true;
	endproc;
	
	export proc bool RangeMarkerUpdate()
		var int i, iC = m_pxSelection^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if(m_xLastSelection.FindEntry(m_pxSelection^[i])==-1)then
				ActivateRangeMarker(m_pxSelection^[i]);
			else
				m_xLastSelection.RemEntry(m_pxSelection^[i]);
			endif;
		endfor;
		iC = m_xLastSelection.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			m_pxObjMgr^.DeleteRangeMarkersForObj(m_xLastSelection[i].GetObj());
		endfor;
		iC = m_pxSelection^.NumEntries();
		m_xLastSelection.Clear();
		for(i=0)cond(i<iC)iter(i++)do
			m_xLastSelection.Include(m_pxSelection^[i]);
		endfor;
		return(true);
	endproc;
	
	export proc void ActivateRangeMarker(CClntHndl p_xHndl)
		var ^CObj pxObj = p_xHndl.GetObj();
		if(pxObj==null || (pxObj^.GetType()!="CHTR" && pxObj^.GetType()!="ANML" && pxObj^.GetType()!="VHCL" && pxObj^.GetType()!="SHIP" && pxObj^.GetType()!="BLDG"))then return; endif;
		var ^CAttribs pxAttr = pxObj^.GetAttribs();
		if(pxAttr==null)then return; endif;
//		begin AttackRange;
//			if(m_bShowAttackRange)then
//				var real fRange = pxAttr^.GetValueFloat("range_marker");
//				if(fRange>0.0f)then
//					var ^CObjMgr.CRangeMarker pxRangeMarker = m_pxObjMgr^.CreateRangeMarker();
//					pxRangeMarker^.SetObject(pxObj);
//					pxRangeMarker^.m_fRange = fRange;
//					pxRangeMarker^.m_fWidth1 = 0.3f;
//					pxRangeMarker^.m_fWidth2 = 0.3f;
//					pxRangeMarker^.m_xColor1= {{255,0,0,0}};
//					pxRangeMarker^.m_xColor2= {{255,150,100,0}};
//				endif;
//				fRange = pxAttr^.GetValueFloat("alarm_range_marker");
//				if(fRange>0.0f)then
//					var ^CObjMgr.CRangeMarker pxAlarmRangeMarker = m_pxObjMgr^.CreateRangeMarker();
//					pxAlarmRangeMarker^.SetObject(pxObj);
//					pxAlarmRangeMarker^.m_fRange = fRange;
//					pxAlarmRangeMarker^.m_fWidth1 = 0.3f;
//					pxAlarmRangeMarker^.m_fWidth2 = 0.3f;
//					pxAlarmRangeMarker^.m_xColor1= {{140,0,255,0}};
//					pxAlarmRangeMarker^.m_xColor2= {{140,0,255,0}};
//				endif;
//			endif;
//		end AttackRange;
		
//		begin AuraRange;
//			if(m_bShowAuraRange)then
//				var string sRangeMarker = pxAttr^.GetValue("RangeMarker");
//				if(sRangeMarker=="")then return; endif;
//				var array string asMarkers;
//				sRangeMarker.Split(asMarkers,";",true);
//				var int i,iC = asMarkers.NumEntries();
//				for(i=0)cond(i<iC)iter(i++)do
//					var string sMarker = asMarkers[i].Left(asMarkers[i].Find('/'));
//					var real fRange = asMarkers[i].Mid(asMarkers[i].FindRev('/')+1).ToReal();
//					if(fRange > 0.0f)then
//						var ^CObjMgr.CRangeMarker pxRangeMarker = m_pxObjMgr^.CreateRangeMarker();
//						pxRangeMarker^.SetObject(pxObj);
//						pxRangeMarker^.m_fRange = fRange;
//						pxRangeMarker^.m_fWidth1 = 0.3f;
//						pxRangeMarker^.m_fWidth2 = 0.3f;
//						pxRangeMarker^.m_xColor1= {{0,255,0,0}};
//						pxRangeMarker^.m_xColor2= {{0,255,100,0}};
//					endif;
//				endfor;
//			endif;
//		end AuraRange;
	endproc;
	
	export proc void SetRangeMarker(^CObj p_pxObj,int p_iShowTime)
		if(p_pxObj==null ||p_iShowTime==0) then return; endif;
		var ^CRangeMgrsMarker pxRangeMgrsMarker = new CRangeMgrsMarker();
		pxRangeMgrsMarker^.SetRangeMarker(p_pxObj);
		pxRangeMgrsMarker^.SetShowTime(p_iShowTime);
		m_apxRangeMarker.AddEntry(pxRangeMgrsMarker);
	endproc;
		
	export proc void TimeToDeleteRangeMarker(int p_iShowRangeMarkerSeconds)
		var CGameTime xNow = CTimeMgr.Get().GetTime();
		var int iSeconds=xNow.GetSecondsI();
		var ^CRangeMgrsMarker pxRangeMgrsMarker;
		var int i, iC=m_apxRangeMarker.NumEntries();
		if(m_apxRangeMarker.NumEntries()<=0) then return; endif;
		for(i=0)cond(i<iC)iter(i++)do
			pxRangeMgrsMarker=m_apxRangeMarker[i];
			if (pxRangeMgrsMarker==null) then return; endif;
			if (pxRangeMgrsMarker^.GetRangeMarker() != null && (pxRangeMgrsMarker^.GetCreationTime() + pxRangeMgrsMarker^.GetShowTime() <= iSeconds))then
				CClientWrap.GetObjMgr().DeleteRangeMarker(pxRangeMgrsMarker^.GetRangeMarker());
				m_apxRangeMarker.DeleteEntryUS(i);
				i--;
				iC--;
			endif;
		endfor;
	endproc;
	
	class CRangeMgrsMarker
		var ^CObjMgr.CRangeMarker	m_pxRangeMarker;
		var CGameTime							m_xCreationTime;
		var int										m_iCreationTimeSec;
		var int										m_iTimeToShow;
		
		export constructor()
			m_pxRangeMarker = CClientWrap.GetObjMgr().CreateRangeMarker();
			m_xCreationTime = CTimeMgr.Get().GetTime();
			m_iCreationTimeSec = m_xCreationTime.GetSecondsI();
			m_iTimeToShow = 0;
		endconstructor;
		
		export destructor()
		enddestructor;
		
		export proc void SetRangeMarker(^CObj p_pxObj)
			if (m_pxRangeMarker != null) then
				m_pxRangeMarker^.SetObject(p_pxObj);
				m_pxRangeMarker^.m_fRange = p_pxObj^.GetRadius();
				m_pxRangeMarker^.m_fWidth1 = 0.3f;
				m_pxRangeMarker^.m_fWidth2 = 0.3f;
				m_pxRangeMarker^.m_bVisible = true;
			else
				m_iCreationTimeSec = 0;
			endif;
		endproc;
		
		export proc void SetShowTime(int p_iShowTime)
			m_iTimeToShow=p_iShowTime;
		endproc;
		
		export proc int GetCreationTime()
			return m_iCreationTimeSec;
		endproc;
		
		export proc int GetShowTime()
			return m_iTimeToShow;
		endproc;
		
		export proc ^CObjMgr.CRangeMarker GetRangeMarker()
			return m_pxRangeMarker;
		endproc;
	endclass;
	
endclass;