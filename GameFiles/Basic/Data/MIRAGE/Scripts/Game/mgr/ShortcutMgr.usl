class CShortcutMgr
	
	static var ^CShortcutMgr ms_pxInst;
	var array CCombinationDef m_axCombinations;
	var array string m_asRegisteredKeys;
	
	//classes
	class CCombinationDef
		
		export var string m_sKey;
		export var string m_sAction;
		
		export proc bool op_Equal(ref CShortcutMgr.CCombinationDef p_rxOther)
			return m_sAction==p_rxOther.m_sAction;
		endproc;
		
		export proc bool op_Greater(ref CShortcutMgr.CCombinationDef p_rxOther)
			return m_sAction>p_rxOther.m_sAction;
		endproc;
		
		export proc string GetKey()
			return(m_sKey);
		endproc;
		
		export proc string GetAction()
			return(m_sAction);
		endproc;
		
	endclass;
	
	constructor()
		Init(CClientWrap.GetUrsRelPath()+"/Data/Base/Scripts/Game/options/Shortcuts.txt");
	endconstructor;
	
	export static proc ref CShortcutMgr Get()
		if(ms_pxInst==null)then
			ms_pxInst = new CShortcutMgr();
		endif;
		return ms_pxInst^;
	endproc;
	
	export static proc void ShutStatic()
		delete ms_pxInst;
	endproc;
	
	proc void RegisterKey(ref string p_rsKey)
		p_rsKey.MakeUpper();
		if(m_asRegisteredKeys.FindEntry(p_rsKey)==-1)then
			m_asRegisteredKeys.AddEntry(p_rsKey);
		endif;
	endproc;
	
	export proc array string GetAccelKeys()
		return m_asRegisteredKeys;
	endproc;
	
	export proc bool FindKeyByAction(string p_sAction, ref string p_rsKey)
		var CCombinationDef xTemp;
		xTemp.m_sAction=p_sAction;
		var int iIdx=m_axCombinations.BinarySearch(xTemp);
		if(iIdx!=-1)then
			p_rsKey=m_axCombinations[iIdx].GetKey();
			return p_rsKey!="";
		endif;
		return false;
	endproc;
	
	proc void Init(string p_sFile)
		var CPropDB xDB;
		if(!xDB.Load(p_sFile))then
			return;
		endif;
		var ^CPropDB.CNode pxRoot=^(xDB.GetRoot());
		var int i,iC=pxRoot^.NumSubs();
		for(i=0) cond(i<iC)iter(i++)do
			var ^CPropDB.CNode pxCombination=^((pxRoot^)[i]);
			if(pxCombination==null)then continue; endif;
			var string sAction = pxCombination^.GetValueS("Action");
			var string sShortcut = pxCombination^.GetValueS("Shortcut");
			if(sAction==""||sShortcut=="")then continue; endif;
			var CCombinationDef xTemp;
			xTemp.m_sAction=sAction;
			xTemp.m_sKey=sShortcut;
			var int iIdx=m_axCombinations.BinarySearch(xTemp);
			if(iIdx==-1)then
				RegisterKey(sShortcut);
				m_axCombinations.BinaryInsert(xTemp);
//				var ^CCombinationDef pxCDef=^(m_axCombinations.NewEntryRef());
//				pxCDef^.m_sAction=sAction;
//				pxCDef^.m_sKey=sShortcut;
			endif;
		endfor;
	endproc;
	
endclass;

