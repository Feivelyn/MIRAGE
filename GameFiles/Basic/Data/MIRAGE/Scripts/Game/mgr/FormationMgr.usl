class CFormationMgr
	
	static var ^CFormationMgr			ms_pxInst;
	var string										m_sFormation;
	var int												m_iWidth;
	var bool											m_bEnabled;
	
	constructor()
		var CConfig xConf;
		m_bEnabled = xConf.GetB("Client/GameplayOptions/FormationEnabled",false);
		m_sFormation = xConf.GetS("Client/GameplayOptions/CurrentFormation","standard_0");
		m_iWidth = Math.Clamp((xConf.GetI("Client/GameplayOptions/FormationWidth",0)).ToReal(),0.0,3.0).ToInt();
//		m_sFormation = "standard_0";
//		m_iWidth = 0;
	endconstructor;
	
	destructor()
	enddestructor;
	
	proc real GetRadius(^CObj p_pxObj)
		var vec3 vSize = p_pxObj^.GetSize();
		vSize.SetZ(0.0);
		return vSize.Abs()*1.3;
	endproc;
	
	proc bool IsFormationAvailable()
//		var ^CPlayer pxPlayer = ^(CGameWrap.GetClient().GetPlayer());
//		var CTechTree xTechTree = pxPlayer^.GetPlayerTechTree();
//		return(xTechTree.GetValueI("/Objects/"+CGameInst.ms_sTribe+"/InventObjects/Formations/invented",0) != 0);
		return true;
	endproc;
	
	export proc string GetFormation()
		return m_sFormation;
	endproc;
	
	export proc bool GetFormation(ref string p_rsFormation)
		p_rsFormation=" /PosJitter /Formation="+m_sFormation;
		return m_bEnabled;
	endproc;
	
	export proc string GetCurFormation()
		if(!m_bEnabled)then return ""; endif;
		return " /PosJitter /Formation="+m_sFormation;
	endproc;
	
	export proc bool ToggleState()
		m_bEnabled = !m_bEnabled;
		var CConfig xConf;
		xConf.SetB("Client/GameplayOptions/FormationEnabled",m_bEnabled);
		return true;
	endproc;
	
	export proc void FormationDef()
		m_sFormation = "defensive";
		var CConfig xConf;
		xConf.SetS("Client/GameplayOptions/CurrentFormation",m_sFormation);
	endproc;
	
	export proc void FormationInc()
		m_iWidth = Math.Clamp((m_iWidth+1).ToReal(),0.0,3.0).ToInt();
		m_sFormation = "standard_"+m_iWidth.ToString();
		var CConfig xConf;
		xConf.SetS("Client/GameplayOptions/CurrentFormation",m_sFormation);
		xConf.SetI("Client/GameplayOptions/FormationWidth",m_iWidth);
	endproc;
	
	export proc void FormationDec()
		m_iWidth = Math.Clamp((m_iWidth-1).ToReal(),0.0,3.0).ToInt();
		m_sFormation = "standard_"+m_iWidth.ToString();
		var CConfig xConf;
		xConf.SetS("Client/GameplayOptions/CurrentFormation",m_sFormation);
		xConf.SetI("Client/GameplayOptions/FormationWidth",m_iWidth);
	endproc;
	
	export proc void Form(^CObjSelection p_pxSel, int p_iType, vec3 p_vPickPoint, vec3 p_vDir)
		if(!IsFormationAvailable() && p_iType!=-1 )then
			return;
		endif;
		if(p_iType==0)then
			m_iWidth = Math.Clamp((m_iWidth-1).ToReal(),0.0,3.0).ToInt();
			m_sFormation = "standard_"+m_iWidth.ToString();
		elseif(p_iType==1)then
			m_iWidth = Math.Clamp((m_iWidth+1).ToReal(),0.0,3.0).ToInt();
			m_sFormation = "standard_"+m_iWidth.ToString();
		elseif(p_iType==2)then
			m_sFormation = "defensive";
		endif;
		var int i,iC=p_pxSel^.NumEntries();
		var CObjList xList;
		for(i=0)cond(i<iC)iter(i++)do
			xList.Include(p_pxSel^[i]);
		endfor;
		var CClntHndl xInvalid;
		CEvt_GamePlayCommand.Send(xList, "Action", xInvalid, p_vPickPoint, "/Walk /PosJitter /Formation="+CFormationMgr.Get().GetFormation());
		
/*		var int i, iC = p_pxSel^.NumEntries();
		
		var array real afRadius;
		var CObjList xRes, xTec, xNat ,xAnimals, xVehicles, xMisc;
		var real fMaxRadius = 0.0;
		var real fTotalRadius = 0.0;
		
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxObj = p_pxSel^[i].GetObj();
			if(pxObj!=null)then
				if(pxObj^.GetType()=="ANML")then
					xAnimals.Include(p_pxSel^[i]);
				elseif(pxObj^.GetType()=="VHCL")then
					xVehicles.Include(p_pxSel^[i]);
				elseif(pxObj^.GetType()=="CHTR")then
					var ^CAttribs pxAttr = pxObj^.GetAttribs();
					if(pxAttr != null)then
						if(pxAttr^.GetValue("caste")=="nat")then
							xNat.Include(p_pxSel^[i]);
						elseif(pxAttr^.GetValue("caste")=="tec")then
							xTec.Include(p_pxSel^[i]);
						elseif(pxAttr^.GetValue("caste")=="res")then
							xRes.Include(p_pxSel^[i]);
						endif;
					endif;
				else
					xMisc.Include(p_pxSel^[i]);
				endif;
				var real fRadius = GetRadius(pxObj);
				if(fRadius>fMaxRadius)then
					fMaxRadius = fRadius;
				endif;
				fTotalRadius += fRadius;
			endif;
		endfor;
*/
/*		begin Sort;
//			Stupid BubbleSort...
			var bool bChanged;
			while(bChanged)do
				var CClntHndl xHndl;
				var real fRadius;
				bChanged = false;
				for(i=1)cond(i<afRadius.NumEntries())iter(i++)do
					if(afRadius[i-1] < afRadius[i])then

						xHndl = xList[i];
						xList[i] = xList[i-1];
						xList[i-1] = xHndl;

						fRadius = afRadius[i];
						afRadius[i] = afRadius[i-1];
						afRadius[i-1] = fRadius;
						
						bChanged = true;
						
					endif;
				endfor;
			endwhile;
		end Sort;
*/
/*
		var vec3 vPickPos = p_vPickPoint;
		var vec3 vStdVecX = p_vDir${0.0,0.0,1.0};
		var vec3 vStdVecY = p_vDir;

		vStdVecY *= fMaxRadius*0.8;
		var array vec3 avPos;
		var real fWidth;

		for(i=0)cond(i<xRes.NumEntries())iter(i++)do
			var real fRadius = GetRadius(xRes[i].GetObj());
			if(fRadius<5.0)then
				fRadius = 1.5;
			endif;
			fWidth += fRadius;
			avPos.AddEntry(vStdVecX*fWidth);
			fWidth += fRadius;
		endfor;
		
		SendRow((vPickPos)-(vStdVecX*fWidth/2.0),avPos,xRes);

		avPos = 0;
		fWidth = 0.0;
		for(i=0)cond(i<xNat.NumEntries())iter(i++)do
			var real fRadius = GetRadius(xNat[i].GetObj());
			if(fRadius<5.0)then
				fRadius = 1.5;
			endif;
			fWidth += fRadius;
			avPos.AddEntry(vStdVecX*fWidth);
			fWidth += fRadius;
		endfor;
		
		SendRow((vPickPos+(vStdVecY*1.0))-(vStdVecX*fWidth/2.0),avPos,xNat);

		avPos = 0;
		fWidth = 0.0;
		for(i=0)cond(i<xTec.NumEntries())iter(i++)do
			var real fRadius = GetRadius(xTec[i].GetObj());
			if(fRadius<5.0)then
				fRadius = 1.5;
			endif;
			fWidth += fRadius;
			avPos.AddEntry(vStdVecX*fWidth);
			fWidth += fRadius;
		endfor;
		
		SendRow((vPickPos+(vStdVecY*2.0))-(vStdVecX*fWidth/2.0),avPos,xTec);
*/	
	endproc;
	
	proc void SendRow(vec3 p_vStart, ref array vec3 p_ravDither, ref CObjList p_rxObjs)
		if(p_ravDither.NumEntries()!=p_rxObjs.NumEntries())then
			CGameWrap.LogError("FormationMgr","SendRow() bad bad Error!");
			return;
		endif;
		var int i;
		var CClntHndl xInvalid;
		for(i=0)cond(i<p_ravDither.NumEntries())iter(i++)do
			CEvt_GamePlayCommand.Send(p_rxObjs[i],"Action",xInvalid,p_vStart+p_ravDither[i],"/Walk");
		endfor;
	endproc;
	
	export static proc ref CFormationMgr Get()
		if(ms_pxInst==null)then
			ms_pxInst=new CFormationMgr;
		endif;
		return(ms_pxInst^);
	endproc;
	
	export static proc void Kill()
		if(ms_pxInst != null)then
			delete ms_pxInst;
			ms_pxInst = null;
		endif;
	endproc;
	
endclass;