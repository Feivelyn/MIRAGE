// USL Class file for the Discord rich presence state integration for MIRAGE - Game and SDK
// Version 1 - 2022-12-30
//
// Usage:
// CGameStateReporter.SetState("editor");

class CGameStateReporter

	const string m_ksFileState = "state_mirage.txt";
	const string m_ksGSRVersion = "1";

	export static proc void SetState(string p_sDetails)
		var array string asLines;
		asLines.AddEntry("StateType=StateSmall");
		asLines.AddEntry("Details="+p_sDetails);
		asLines.AddEntry("Mods="+GetMods());
		WriteFile(asLines);
	endproc;

	export static proc void SetState(string p_sDetails, string p_sAdditional, string p_sTribe, CGameStateMapInfo p_xMapInfo, string p_sGameMode, string p_sServer, int p_iNumPlayers, int p_iMaxPlayers)
		var array string asLines;
		asLines.AddEntry("StateType=StateFull");
		asLines.AddEntry("Details="+p_sDetails);
		asLines.AddEntry("Additional="+p_sAdditional);
		asLines.AddEntry("Tribe="+p_sTribe);
		AddMapInfo(^asLines, p_xMapInfo);
		asLines.AddEntry("GameMode="+p_sGameMode);
		asLines.AddEntry("Mods="+GetMods());
		asLines.AddEntry("Server="+p_sServer);
		asLines.AddEntry("NumPlayers="+p_iNumPlayers.ToString());
		asLines.AddEntry("MaxPlayers="+p_iMaxPlayers.ToString());
		WriteFile(asLines);
	endproc;

	static proc void AddMapInfo(^array string p_pasLines, CGameStateMapInfo p_xMapInfo)
		p_pasLines^.AddEntry("MapFile="+p_xMapInfo.m_sFilename);
		p_pasLines^.AddEntry("MapName="+p_xMapInfo.m_sName);
		p_pasLines^.AddEntry("MapSetting="+p_xMapInfo.m_sSetting);
	endproc;

	static proc void WriteFile(array string p_asLines)
		// ensure the folder exists
		var string sDiscordFolder = CSettings.GetUserSettingsDir()+"DiscordState/";
		if(!Filesystem.MkDir(sDiscordFolder)) then
			KLog.LogError("CGameStateReporter","Could not mkdir" + sDiscordFolder);
		endif;
		
		var string sFileState = sDiscordFolder+m_ksFileState;
		
		// delete the old files
		Filesystem.Delete(sFileState);
		
		// write state file
		var Filesystem.CFile xFileState;
		if(!xFileState.OpenWrite(sFileState)) then
			KLog.LogWarn("CGameStateReporter","Could not open" + sFileState);
			return;
		endif;

		var int i, iC=p_asLines.NumEntries();
		var string sState = "GSRVersion="+m_ksGSRVersion;
		for(i=0)cond(i<iC)iter(++i)do
			sState += "," + p_asLines[i];
		endfor;

		xFileState.PrintLn(sState);
		xFileState.Close();
	endproc;
	
	static proc string GetMods()
		var string sMods = CVersionInfo.GetCompatibleVersionsString();
		sMods.Delete(0,15);
		return sMods;
	endproc;
	
endclass;

class CGameStateMapInfo

	export var string m_sFilename;
	export var string m_sName;
	export var string m_sSetting;

endclass;
