class CQuestionWindow inherit CStateUIWnd
	
	export var procref <void>		m_xOnOk;
	
	var ^CDesktop				m_pxDesktop;
	
	export constructor(string p_sQuestion)
		if(!InitFromResource("UI/QuestionWindow","QuestionWindow")) then
			return;
		endif;
		
		m_pxDesktop=CClientWrap.GetDesktop();
		
		var real fPercantageX=50.0f;
		var real fPercantageY=50.0f;
		
		var real fWidth=m_pxDesktop^.GetWidth().ToReal();
		var real fHeight=m_pxDesktop^.GetHeight().ToReal();
		var int iPosX=((fWidth/100.0f)*fPercantageX).ToInt();
		var int iPosY=((fHeight/100.0f)*fPercantageY).ToInt();
		SetSize(350 * CGameInst.ms_iUIScaleFactor,200 * CGameInst.ms_iUIScaleFactor);
		var int iTmpX=(iPosX.ToReal()-(GetWidth().ToReal()/2.0f)).ToInt();
		var int iTmpY=(iPosY.ToReal()-(GetHeight().ToReal()/2.0f)).ToInt();
		SetPos(iTmpX,iTmpY);
		
		var ^CStaticCtrl pxTmp=cast<CStaticCtrl>(GetControl("QuestionStatic"));
		pxTmp^.SetTextAlign(0);
		pxTmp^.SetText(p_sQuestion);
		pxTmp^.SetTextAlign(1);
		pxTmp^.SetTextLineBreak(true);
		
		var ^CMenuButton pxTmpButton=cast<CMenuButton>(GetControl("Cancel"));
		pxTmpButton^.SetTextAlign(1);
		pxTmpButton^.m_xOnClick=OnCancel;
		SetCmd("Exit", OnCancel );
		AddAccelerator("ESCAPE,NONE,Exit");
		
		pxTmpButton=cast<CMenuButton>(GetControl("Ok"));
		pxTmpButton^.SetTextAlign(1);
		pxTmpButton^.m_xOnClick=OnOk;
		SetCmd("Commit", OnOk );
		AddAccelerator("RETURN,NONE,Commit");
		
		SetWindowTitle(CLocalizer.Get().Translate("_UI_QuestioW_Title_Question"));
		CWindowMgr.Get().BringWindowToTop(this,true);
		CWindowMgr.Get().SetModal(this);
	endconstructor;

	export proc bool Init(int p_iState)
		return(true);
	endproc;
	
	proc bool OnOk()
		if(!(m_xOnOk.IsNull()))then
			m_xOnOk.Call();
		endif;
		Destroy();
		return true;
	endproc;
	
	proc bool OnCancel()
		Destroy();
		return true;
	endproc;
	
endclass;

class CPasswordWindow inherit  CStateUIWnd
	
	export var procref <void>		m_xOnOk;	
	export var procref <void>		m_xOnChange;
	var ^CDesktop					m_pxDesktop;
	var ^CEdit						m_pxPassword;
	var ^CButton					m_pxBtnOkay;
	
	export constructor(string p_sWindowTitle)
		if(!InitFromResource("UI/QuestionWindow","PasswordWindow")) then
			return;
		endif;
		
		m_pxDesktop=CClientWrap.GetDesktop();
		
		var real fPercantageX=78.5f;
		var real fPercantageY=61.0f;
		
		var real fWidth=m_pxDesktop^.GetWidth().ToReal();
		var real fHeight=m_pxDesktop^.GetHeight().ToReal();
		var int iPosX=((fWidth/100.0f)*fPercantageX).ToInt();
		var int iPosY=((fHeight/100.0f)*fPercantageY).ToInt();
		SetSize(350 * CGameInst.ms_iUIScaleFactor,150 * CGameInst.ms_iUIScaleFactor);
		var int iTmpX=(iPosX.ToReal()-(GetWidth().ToReal()/2.0f)).ToInt();
		var int iTmpY=(iPosY.ToReal()-(GetHeight().ToReal()/2.0f)).ToInt();
		SetPos(iTmpX,iTmpY);
		
		var ^CStaticCtrl pxTmp=cast<CStaticCtrl>(GetControl("PasswordStatic"));
		pxTmp^.SetTextAlign(0);
		var ^CStaticCtrl pxTmpIcon=cast<CStaticCtrl>(GetControl("Passwordicon"));
		var string sBitmapPath = CClientWrap.GetUrsRelPath()+"/Data/Base/UI/menue/decoration/server_password.tga";
		pxTmpIcon^.SetBitmap(sBitmapPath);
		
		m_pxPassword = cast<CEdit>(GetControl("PasswordEdit"));
		m_pxPassword^.m_xOnChange = OnEnterPassword;
		
		var ^CMenuButton pxTmpButton=cast<CMenuButton>(GetControl("PasswordCancel"));
		pxTmpButton^.SetTextAlign(0);
		pxTmpButton^.SetTextIndent(7);
		pxTmpButton^.m_xOnClick=OnPasswordCancel;
		SetCmd("Exit", OnPasswordCancel );
		AddAccelerator("ESCAPE,NONE,Exit");
		
		m_pxBtnOkay=cast<CMenuButton>(GetControl("PasswordOk"));
		m_pxBtnOkay^.SetTextAlign(0);
		m_pxBtnOkay^.SetTextIndent(7);
		m_pxBtnOkay^.m_xOnClick=OnPasswordOk;
		m_pxBtnOkay^.SetDisabled(true);
		SetCmd("Commit", OnPasswordOk );
		AddAccelerator("RETURN,NONE,Commit");
		
		SetWindowTitle(p_sWindowTitle);
		CWindowMgr.Get().BringWindowToTop(this,true);
		CWindowMgr.Get().SetModal(this);
		SetCaption(p_sWindowTitle);
	endconstructor;
	
	proc bool OnPasswordOk()
		if(!(m_xOnOk.IsNull()))then
			m_xOnOk.Call();
		endif;
		Destroy();
		return true;
	endproc;
	
	proc bool OnEnterPassword()
		if(m_pxPassword^.GetText().GetLength()>0) then
			m_pxBtnOkay^.SetDisabled(false);
		else
			m_pxBtnOkay^.SetDisabled(true);	
		endif;
		return true;
	endproc;
	
	proc bool OnPasswordCancel()
		Destroy();
		return true;
	endproc;
	
	export proc string GetPassword() 
		return m_pxPassword^.GetText();
	endproc;
endclass;
