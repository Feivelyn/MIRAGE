class CHistoryWindow inherit CFrameWindow

	var ^CButton				m_pxCloseButton;
	var ^CNewsTickerHistory		m_pxHistory;
	var ^CCheckBox				m_pxAutoScroll;
	
	var ^CNewsTicker			m_pxNewsTicker;
	var bool					m_bScrollToEnd;

	export constructor()
		if(!InitFromResource("UI/HistoryWindow","HistoryWindow")) then
			CGameWrap.LogError("UI.HistoryWindow","InitFromResource failed");
			return;
		endif;

		var ^CDesktop	pxDesktop=CClientWrap.GetDesktop();
		var int iDW=pxDesktop^.GetSize().GetX();
		var int iDH=pxDesktop^.GetSize().GetY();
		var int iW=765 * CGameInst.ms_iUIScaleFactor;
		var int iH=515 * CGameInst.ms_iUIScaleFactor;
		SetSize(iW,iH);
		SetPos((iDW-iW)/2,(iDH-iH)/2-95 * CGameInst.ms_iUIScaleFactor);

		m_pxCloseButton=cast<CButton>(GetControl("CloseButton"));
		m_pxCloseButton^.SetTransparent(true);
		m_pxCloseButton^.m_xOnClick = OnBack;
		m_pxCloseButton^.SetDisabled(false);
		m_pxCloseButton^.SetTextAlign(0);
		m_pxCloseButton^.SetTextIndent(6);
		
		SetDefButtonCancel(m_pxCloseButton);
		
		m_pxHistory=cast<CNewsTickerHistory>(GetControl("History"));
		m_pxHistory^.SetContentIndentX(4);

		m_pxAutoScroll=cast<CCheckBox>(GetControl("AutoScroll"));
		m_pxAutoScroll^.SetChecked(1);
		m_pxAutoScroll^.m_xOnStateChange=OnChangeAutoScroll;
		
		SetDisabled(false);
		SetVisible(true);
		m_bScrollToEnd=true;
		SetCmd("Exit", OnBack );
		AddAccelerator("F9,NONE,Exit");
	endconstructor;
	
	destructor()
		if(m_pxNewsTicker!=null)then
			m_pxNewsTicker^.SetHistoryWindow(null);
		endif;
	enddestructor;

	proc bool OnBack()
		Destroy();
		return true;
	endproc;

	export proc bool Init()
		return true;
	endproc;
	
	proc bool OnSelect()
		return true;
	endproc;
	
	export proc bool InitHistory()
		if(m_pxNewsTicker!=null)then
			m_pxHistory^.ClearHistory();
			var array CNewsTickerData axNewsTickerHistory;
			m_pxNewsTicker^.GetNewsTickerHistory(axNewsTickerHistory);
			var string sScript;
			var int i, iC=axNewsTickerHistory.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
				AddNewEntry(axNewsTickerHistory[i]);
			endfor;
		endif;
		return true;
	endproc;
	
	export proc void SetNewsticker(^CNewsTicker p_pxNewsTicker)
		m_pxNewsTicker=p_pxNewsTicker;
		if(m_pxNewsTicker!=null)then
			m_pxNewsTicker^.SetHistoryWindow(this);
			InitHistory();
		endif;
	endproc;
	
	export proc void AddNewEntry(CNewsTickerData p_xNTData)
		if(
			p_xNTData.m_dwNTType==CNewsTickerData.NTT_Attack ||
			p_xNTData.m_dwNTType==CNewsTickerData.NTT_Economy ||
			p_xNTData.m_dwNTType==CNewsTickerData.NTT_Info ||
			p_xNTData.m_dwNTType==CNewsTickerData.NTT_System
		)then
			return;
		endif;
		m_pxHistory^.AddEntry(p_xNTData);
	endproc;
	
	export proc bool OnChangeAutoScroll()
		if(m_pxAutoScroll^.GetChecked()==1)then
			m_pxHistory^.SetAutoScroll(true);
			m_bScrollToEnd=true;
		else
			m_pxHistory^.SetAutoScroll(false);
			m_bScrollToEnd=false;
		endif;
		InvalidateContent();
		return true;
	endproc;
endclass;
