class CMultiPlayerHostIPScreen inherit CStateUIWnd
	
	var ^CDesktop	m_pxDesktop;
	var int 		m_iServerTimer;
	
	export constructor()
		if(!InitFromResource("UI/MultiPlayerHostIPScreen","MultiPlayerHostIPScreen")) then
			return;
		endif;
		
		m_pxDesktop=CClientWrap.GetDesktop();
		
		var real fPercantageX=4.0f;
		var real fPercantageY=3.0f;
		
		var real fWidth=m_pxDesktop^.GetWidth().ToReal();
		var real fHeight=m_pxDesktop^.GetHeight().ToReal();
		var int iPosX=((fWidth/100.0f)*fPercantageX).ToInt();
		var int iPosY=((fHeight/100.0f)*fPercantageY).ToInt();
		SetSize(400 * CGameInst.ms_iUIScaleFactor,380 * CGameInst.ms_iUIScaleFactor);
		SetPos(iPosX * CGameInst.ms_iUIScaleFactor,iPosY * CGameInst.ms_iUIScaleFactor);
		SetWindowTitle(CLocalizer.Get().Translate("_UI_MPHIPScr_Title_HostDirectIP"));

		var ^CButton pxTmp=cast<CButton>(GetControl("Host"));
		pxTmp^.m_xOnClick=OnCheckForServer;
		pxTmp^.SetTextAlign(2);
		
		pxTmp=cast<CButton>(GetControl("Back"));
		pxTmp^.m_xOnClick=OnBack;
		SetCmd("Exit", OnBack );
		AddAccelerator("ESCAPE,NONE,Exit");
		
		var ^CCheckBox pxDedicatedCheckBox=cast<CCheckBox>(GetControl("DedicatedCheckBox"));
		pxDedicatedCheckBox^.m_xOnStateChange=OnDedicatedServer;
		
		var ^CStaticCtrl pxIPAddress=cast<CStaticCtrl>(GetControl("AddressStatic2"));
		pxIPAddress^.SetText(Network.GetLocalIPAddress());
		
		var string sName;
		var ^CUserProfileList pxList=^(CClientWrap.GetUserProfileList());
		if(pxList!=null)then
			sName=pxList^.GetCurrentProfile()^.GetUserName();
			if(sName=="")then
				if(sName=="")then
					sName=Windows.GetUserName();
					CSettings.Set("Game/PlayerName",sName);
				endif;
			endif;
		endif;

		var ^CEdit pxGameName=cast<CEdit>(GetControl("NameEdit"));
		pxGameName^.SetText(sName+"'s Game");
		
	endconstructor;
	
	export proc bool Init(int p_iState)
		return(true);
	endproc;
	
	proc bool OnCheckForServer()
		CGameWrap.StopFindServers();
		CGameWrap.m_xOnServerFound.Clear();
		if(!CClientWrap.HasServer())then
			CUIStateMgr.Get().InvalidateLoadScreenInfo();
			CUIStateMgr.Get().ShowLoadingScreen("StartingNetworkServer",CUIStateMgr.STATE_MULTIPLAYERHOSTIP);
		else
			OnHost();
		endif;
		return(true);
	endproc;
	
	export proc bool OnHost()
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_MULTIPLAYERPREGAME,"true");
		return true;
	endproc;
		
	proc bool OnDedicatedServer()
		//L KLog.LogWarn("Manni","Dedicated click!");
		return(true);
	endproc;
	
	proc bool OnBack()
		CUIStateMgr.Get().SetState(GetReturnState());
		return true;
	endproc;

endclass;
