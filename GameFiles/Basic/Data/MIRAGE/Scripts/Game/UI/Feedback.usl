class CFeedback inherit CPane

	export const bitset CHAT						= 00h;
	export const bitset ATTACK						= 01h;
	export const bitset ECONOMY						= 02h;
	export const bitset DIPLOMACY					= 03h;
	export const bitset UPGRADE						= 04h;
	export const bitset INFO						= 05h;
	export const bitset SYSTEM						= 06h;
	export const bitset NOTHING						= 07h;
	export const bitset GAMEPLAY					= 08h;
	export const bitset ACCOMPLISHED				= 09h;

	static var ^CFeedback	ms_pxInst;
	var array int			m_aiTimers;
	var array string		m_asMsgs;
	var ^CStaticCtrl		m_pxText;
	
	export constructor()
		SetSize(0,0);
		SetColor({{0,0,0,128}});
		m_pxText = new CStaticCtrl();
		m_pxText^.SetTextColor({{255,255,200,255}});
		m_pxText^.SetSuitAlpha(false);
		m_pxText^.SetTransparent(true);
		m_pxText^.SetTextAlign(0);
		m_pxText^.SetBackground(false);
		m_pxText^.SetText("");
		AddChild(m_pxText);
		
		//var procref<void> xProcRef=OnTick;
		//CClientWrap.SetProcRefTick(xProcRef);
	endconstructor;
	
	export destructor()
		delete m_pxText;
	enddestructor;

	proc bool OnTimer(int p_iID)
		var int i=m_aiTimers.FindEntry(p_iID);
		if(i>=0)then
			ms_pxInst^.DelMsg(p_iID);
			return true;
		endif;
		return false;
	endproc;

	proc string RunText()
		var int i;
		var string sReturn = "";
		for(i=0)cond(i<m_asMsgs.NumEntries())iter(i++)do
			sReturn+=(m_asMsgs[i]+"\n");
		endfor;
		return sReturn;
	endproc;

	proc void AddMsg(string p_sMsg)
		m_aiTimers.AddEntry(SetTimer(5000, true));
		m_asMsgs.AddEntry(p_sMsg);
		var string sText = RunText();
		m_pxText^.SetText(sText);
		m_pxText^.AutoSize(true);
		//L CGameWrap.LogSpam("CFeedback.Debug","AddMsg: xP = "+m_pxText^.GetSize().ToString());
		//L CGameWrap.LogSpam("CFeedback.Debug","AddMsg: XXXXXXXXXXXXXXXXXXXXXX\n"+sText+"\nXXXXXXXXXXXXXXXXXXXXXX");
		SetSize(m_pxText^.GetWidth()+10 * CGameInst.ms_iUIScaleFactor,m_pxText^.GetHeight()+10 * CGameInst.ms_iUIScaleFactor);
		m_pxText^.SetPos({5,5});
		SetPos(1014 * CGameInst.ms_iUIScaleFactor - GetWidth(),37 * CGameInst.ms_iUIScaleFactor);
	endproc;

	proc void DelMsg(int p_iIdx)
		var int i = m_aiTimers.FindEntry(p_iIdx);
		if(i>=0)then
			m_asMsgs.DeleteEntry(i);
			m_aiTimers.DeleteEntry(i);
			UnsetTimer(p_iIdx);
		endif;
		var string sText = RunText();
		m_pxText^.SetText(sText);
		m_pxText^.AutoSize(true);
		var point xP = m_pxText^.GetSize();
		//L CGameWrap.LogSpam("CFeedback.Debug","DelMsg: xP = "+xP.ToString());
		//L CGameWrap.LogSpam("CFeedback.Debug","DelMsg: XXXXXXXXXXXXXXXXXXXXXX\n"+sText+"\nXXXXXXXXXXXXXXXXXXXXXX");
		if(xP.GetX() != 0)then
			SetSize(xP.GetX()+10 * CGameInst.ms_iUIScaleFactor,xP.GetY()+10 * CGameInst.ms_iUIScaleFactor);
			m_pxText^.SetPos({5,5});
		else
			SetSize(0,0);
		endif;
		SetPos(1014 * CGameInst.ms_iUIScaleFactor - GetSize().GetX(),37 * CGameInst.ms_iUIScaleFactor);
	endproc;

	export static proc ref CFeedback Get()
		if(ms_pxInst==null)then
			ms_pxInst = new CFeedback;
		endif;
		return(ms_pxInst^);
	endproc;

	export static proc void Print(string p_sString)
		var ^CInGameScreen pxIngameScreen=CUIStateMgr.Get().GetInGameScreen();
		if(pxIngameScreen!=null)then			
			pxIngameScreen^.GetNewsTickerWindow()^.Print(CNewsTickerData.NTT_System,p_sString);
		endif;		
	/*
		if(ms_pxInst==null)then
			ms_pxInst = new CFeedback;
		endif;
		ms_pxInst^.AddMsg(p_sString);
	*/
	endproc;
	
	export static proc void Print(bitset p_dwType, string p_sString)
		
		var ^CInGameScreen pxIngameScreen=CUIStateMgr.Get().GetInGameScreen();
		if(pxIngameScreen!=null)then			
			pxIngameScreen^.GetNewsTickerWindow()^.Print(p_dwType,p_sString);
		endif;		
	endproc;
	
	export static proc void Kill()
		if(ms_pxInst!=null)then
			delete ms_pxInst;
			ms_pxInst = null;
		endif;
	endproc;
	

endclass;


