class CDialogSceneMgr

	var array string	m_asScenesQueue;
	var SHWND					m_hCurScene;
	
	export constructor()
		Reset();
	endconstructor;
	
	export proc void Reset()
		var ^CDialogScene pxCurScene=cast<CDialogScene>(CWindowMgr.Get().GetWindow(m_hCurScene));
		if(pxCurScene!=null)then
			pxCurScene^.Destroy();
		endif;
		m_asScenesQueue=0;
		m_hCurScene.SetInvalid();
	endproc;

	export proc void PushScene(string p_sScene)
		m_asScenesQueue.AddEntry(p_sScene);
	endproc;

	export proc void Tick()
		var ^CDialogScene pxCurScene=cast<CDialogScene>(CWindowMgr.Get().GetWindow(m_hCurScene));
		if(m_asScenesQueue.NumEntries()!=0 && pxCurScene==null) then
			var string sScene=m_asScenesQueue[0];
			m_asScenesQueue.DeleteEntry(0);
			pxCurScene=new CDialogScene(sScene,this);
			pxCurScene^.Init();
			var ^CWindow pxIngameScreen=CUIStateMgr.Get().GetInGameScreen();
			if(pxIngameScreen!=null)then
				//Dialog Scenen werden über Newsticker angezeigt
				/*
				pxIngameScreen^.AddChild(m_pxCurScene);
				CWindowMgr.Get().BringWindowToTop(m_pxCurScene,true);
				m_pxCurScene^.SetAlwaysOnTop(true);
				*/          
				pxCurScene^.SetVisible(false);
			endif;
		endif;
		if(pxCurScene!=null)then
			pxCurScene^.Tick();
			m_hCurScene=pxCurScene^.GetSHWND();
		endif;
	endproc;

	export proc void OnCloseScene(^CDialogScene p_pxScene)
		var ^CDialogScene pxCurScene=cast<CDialogScene>(CWindowMgr.Get().GetWindow(m_hCurScene));
		if(pxCurScene!=null)then
			pxCurScene^.OnSceneEnd();
			pxCurScene^.Destroy();
		endif;
		m_hCurScene.SetInvalid();
	endproc;

	export proc void SetVisible(bool p_bV)
		var ^CDialogScene pxCurScene=cast<CDialogScene>(CWindowMgr.Get().GetWindow(m_hCurScene));
		if(pxCurScene!=null)then
			pxCurScene^.SetVisible(p_bV);
			if (p_bV) then
				pxCurScene^.ContinueScene();
			else
				pxCurScene^.PauseScene();
			endif;
		endif;
	endproc;

endclass;

class CDialogScene inherit CStaticCtrlEx

	var string						m_sScene;
	export var string			m_sSceneName;
	var ^CDialogSceneMgr	m_pxDialogSceneMgr;
	var ^CStaticCtrlEx		m_pxActor;
	var ^CStaticCtrlEx		m_pxTextCtrl;
	var ^CActorImage			m_pxImage;
	var bool							m_bPaused;
	var int								m_iCurFrame;
	var CGameTime					m_xCurFrameEndTime;	
	var CPropDB						m_xData;
	var ^CPropDB.CNode		m_pxFramesNode;
	var bool							m_bPlaySound;
	var CSoundEventMgrClient.CSoundHandle	m_hSoundHandle;
	var CGameTime					m_xLastTickTime;
	var int								m_iDimVolumeLevel;
	var int								m_iDimFadeMS;

	class CActor
		export var string 		m_sKey;
		export var string 		m_sName;
		export var string 		m_sDefIcon;
		export var CClntHndl	m_xObj;
	endclass;

	var array CActor m_axActors;

	export constructor(string p_sScene,^CDialogSceneMgr p_pxDialogSceneMgr)			
		m_iCurFrame=-1;
		m_xCurFrameEndTime=CGameTime.GetInvalidTime();
		m_xLastTickTime=CGameTime.GetInvalidTime();
		m_hSoundHandle=CSoundEventMgrClient.CSoundHandle.InvalidHandle();
		m_sScene=p_sScene;
		m_bPaused=false;
		var CIOPath xPath;
		xPath.Init(p_sScene);
		m_sSceneName=xPath.FilePart();
		m_sSceneName.Delete(m_sSceneName.GetLength()-4,4);
		m_pxDialogSceneMgr=p_pxDialogSceneMgr;
		if(!InitFromResource("UI/DialogScene","DialogScene2")) then
			CGameWrap.LogError("UI.DialogScene","InitFromResource failed");
			return;
		endif;
		m_pxTextCtrl=cast<CStaticCtrlEx>(GetControl("Text"));
		m_pxImage=cast<CActorImage>(GetControl("Image"));
		var ^CButton pxClose=cast<CButton>(GetControl("CloseButton"));
		pxClose^.m_xOnClick=OnClose;
		pxClose^.SetBitmap(CGameWrap.GetUrsRelPath() + "/Data/Base/UI/hud/closebutton.tga");
		pxClose^.SetPos(GetWidth()-19 * CGameInst.ms_iUIScaleFactor,0);
		m_pxImage^.SetPos(10 * CGameInst.ms_iUIScaleFactor,10 * CGameInst.ms_iUIScaleFactor);
		m_pxActor=new CStaticCtrlEx();
		m_pxTextCtrl^.AddChild(m_pxActor);
		m_pxActor^.SetPos(0,0);
		m_pxActor^.SetSize(100 * CGameInst.ms_iUIScaleFactor,40 * CGameInst.ms_iUIScaleFactor);
		m_pxActor^.SetVisible(true);
		m_pxActor^.SetTextAlign(0,0);
		var CConfig xConf;
		m_bPlaySound=xConf.GetSetB("Pest/Sound/DialogScene",true);
		m_iDimVolumeLevel=xConf.GetSetI("Pest/Sound/DialogDimVolumeLevel",50);
		m_iDimFadeMS=xConf.GetSetI("Pest/Sound/DialogDimFadeMS",500);
		CEvt_OnDialogSceneStart.Send(m_sScene);
		SetFrame(true);
		SetFrameType("Custom2");
		var int iScrH = CClientWrap.GetDesktop()^.GetHeight();      
		SetPos(212 * CGameInst.ms_iUIScaleFactor, iScrH-(198 * CGameInst.ms_iUIScaleFactor+GetHeight()));		
	endconstructor;

	export destructor()
		if (m_hSoundHandle!=CSoundEventMgrClient.CSoundHandle.InvalidHandle()) then
			CGameWrap.GetSoundEventMgrClient().StopSound(m_hSoundHandle);
			m_hSoundHandle=CSoundEventMgrClient.CSoundHandle.InvalidHandle();
		endif;
	enddestructor;
	
	export proc void OnSceneEnd()
		CEvt_OnDialogSceneEnd.Send(m_sScene);
	endproc;

	export proc bool Init()
		// dim volume on dialog start
		CSoundMgrCln.SetVolumeRamp(CSoundMgrCln.SOUND_VOLTRACK_GLOBAL,m_iDimVolumeLevel,m_iDimFadeMS);
		CSoundMgrCln.SetVolumeRamp(CSoundMgrCln.SOUND_VOLTRACK_3DSOUND,m_iDimVolumeLevel,m_iDimFadeMS);
		
		m_pxActor^.SetFont("Trebuchet MS",21,10);
		m_pxTextCtrl^.SetFont("Trebuchet MS",21,8);
		m_pxActor^.SetTextColor({{255, 250, 180, 255}});
		m_pxTextCtrl^.SetTextColor({{255, 250, 180, 255}});
		
		//var string sBasePath=CClientWrap.GetUrsRelPath() + "/Data/Base/DialogScenes";
		var string sBasePath=CClientWrap.GetUrsRelPath() + "/Data/Base/DialogScenes";
		var string sFile=sBasePath+"/"+m_sScene;
		if(!m_xData.Load(sFile))then
			sBasePath=CClientWrap.GetUrsRelPath() + "/Data";
			sFile=sBasePath+"/"+m_sScene;
			if(!m_xData.Load(sFile))then
				KLog.LogError("DialogScene","load scene: '"+m_sScene+"' failed.");
				OnClose();
				return false;
			endif;			
		endif;		
		m_pxFramesNode=m_xData.GetRoot().Get("Frames");
		if(m_pxFramesNode==null)then
			KLog.LogError("DialogScene", "no 'Frames' node defined.");
			return false;
		endif;
		var ^CPropDB.CNode pxActorsNode=m_xData.GetRoot().Get("Actors");
		if(pxActorsNode==null)then
			KLog.LogWarn("DialogScene","no 'Actors' node defined");
			return true;
		endif;
		var int i,iC=pxActorsNode^.NumSubs();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CPropDB.CNode pxActorNode=^((pxActorsNode^)[i]);
			RegisterActor(pxActorNode);
		endfor;
		return true;
	endproc;

	proc void RegisterActor(^CPropDB.CNode p_pxActorNode)
		//L KLog.LogSpam("Dialogscene", "RegisterActor() - start");
		var ^CObj pxActor=null;
		var ^CPropDB.CNode pxName=p_pxActorNode^.Get("name");
		var ^CPropDB.CNode pxTribe=p_pxActorNode^.Get("tribe");
		var ^CPropDB.CNode pxClass=p_pxActorNode^.Get("class");
		var ^CPropDB.CNode pxOwner=p_pxActorNode^.Get("owner");
		var ^CPropDB.CNode pxCaste=p_pxActorNode^.Get("caste");
		var ^CPropDB.CNode pxRegion=p_pxActorNode^.Get("region");
		var ^CPropDB.CNode pxLevel=p_pxActorNode^.Get("level");
		var ^CPropDB.CNode pxGenName=p_pxActorNode^.Get("generate_name");
		var ^CPropDB.CNode pxDefIcon=p_pxActorNode^.Get("def_icon");
		var CObjQueryCln xOQ;
		//xOQ.SetType("CHTR");
		if(pxTribe!=null)then
			//xOQ
		endif;
		if(pxClass!=null)then
			xOQ.SetClass(pxClass^.Value());
			//L KLog.LogSpam("Dialogscene", "class: '"+pxClass^.Value()+"'");
		endif;
		if(pxOwner!=null)then
			xOQ.SetOwner(pxOwner^.ValueI());
			//L KLog.LogSpam("Dialogscene", "owner: '"+pxOwner^.ValueI().ToString()+"'");
		endif;
		if(pxRegion!=null)then
			xOQ.SetRegion(pxRegion^.Value());
			//L KLog.LogSpam("Dialogscene", "region: '"+pxRegion^.Value()+"'");
		endif;
		var CObjList xObjects;
		xOQ.Execute(xObjects);
		var int i,iC=xObjects.NumEntries();
		//L KLog.LogSpam("Dialogscene", "founded objects after OQ: '"+iC.ToString()+"'");
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxObj=xObjects[i].GetObj();
			if(pxObj==null)then continue; endif;
			var string sObjName=pxObj^.GetName();
			var ^CAttribs pxAttr = pxObj^.GetAttribs();
			if(pxName!=null)then
				if(pxName^.Value()!=sObjName)then
					continue;
				endif;
			endif;
			if(pxCaste!=null)then
				if(pxAttr==null)then
					continue;
				endif;
				var string sCaste=pxAttr^.GetValue("caste");
				if(pxCaste^.Value()!=sCaste)then
					continue;
				endif;
			endif;
			if(pxLevel!=null)then
				if(pxAttr==null)then
					continue;
				endif;
				var int iLevel=pxAttr^.GetValueInt("level");
				if(pxLevel^.Value()!=iLevel.ToString())then
					continue;
				endif;
			endif;
			if(pxTribe!=null)then
				if(pxAttr==null)then
					continue;
				endif;
				var string sTribe=pxAttr^.GetValue("tribe");
				if(pxTribe^.Value()!=sTribe)then
					continue;
				endif;
			endif;
			//L KLog.LogSpam("Dialogscene", "Actor found: "+pxObj^.GetName());
			pxActor=pxObj;
			break;
		endfor;
		//L KLog.LogSpam("Dialogscene", "GetActor() - end");
		var string sName=p_pxActorNode^.Name();
		//L KLog.LogSpam("Dialogscene","ActorNodeName: '"+sName+"'");
		var bool bGenerateName=true;
		if(pxGenName!=null)then
			bGenerateName=(pxGenName^.Value()=="true");
		endif;
		if(bGenerateName)then
			if(pxActor!=null)then
				sName=pxActor^.GetName();
				//L KLog.LogSpam("Dialogscene","ActorName: '"+sName+"'");
				var int iUnderline=sName.Find("_");
				if(iUnderline!=-1)then
					sName=sName.Left(iUnderline);
				endif;
				//L KLog.LogSpam("Dialogscene","Generated Name: ActorName: '"+sName+"'");
			endif;
		endif;
		var string sDefIcon;
		if(pxDefIcon!=null)then
			sDefIcon=pxDefIcon^.Value();
		endif;
		var ^CActor pxNew=^(m_axActors.NewEntryRef());
		pxNew^.m_sKey=p_pxActorNode^.Name();
		pxNew^.m_sName=sName;
		pxNew^.m_sDefIcon=sDefIcon;
		//L KLog.LogSpam("Dialogscene", "Actor: key: '"+pxNew^.m_sKey+"', name: '"+pxNew^.m_sName+"', generated: "+bGenerateName.ToString());
		if(pxActor!=null)then
			pxNew^.m_xObj=pxActor^.GetHandle();
		endif;
	endproc;

	proc ^CDialogScene.CActor GetActor(string p_sActorKey)
		var int i,iC=m_axActors.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if(m_axActors[i].m_sKey==p_sActorKey)then
				return ^(m_axActors[i]);
			endif;
		endfor;
		return null;
	endproc;

	export proc void PauseScene();
		if (m_hSoundHandle!=CSoundEventMgrClient.CSoundHandle.InvalidHandle()) then
			CGameWrap.GetSoundEventMgrClient().PauseSound(m_hSoundHandle);
		endif;
		m_bPaused=true;
		// restore volume immediately
		CSoundMgrCln.SetVolumeRamp(CSoundMgrCln.SOUND_VOLTRACK_GLOBAL,100,0);
		CSoundMgrCln.SetVolumeRamp(CSoundMgrCln.SOUND_VOLTRACK_3DSOUND,100,0);
	endproc;

	export proc void ContinueScene();
		if (m_hSoundHandle!=CSoundEventMgrClient.CSoundHandle.InvalidHandle()) then
			CGameWrap.GetSoundEventMgrClient().ResumeSound(m_hSoundHandle);
		endif;
		m_bPaused=false;

		// dim volume immediately
		CSoundMgrCln.SetVolumeRamp(CSoundMgrCln.SOUND_VOLTRACK_GLOBAL,m_iDimVolumeLevel,0);
		CSoundMgrCln.SetVolumeRamp(CSoundMgrCln.SOUND_VOLTRACK_3DSOUND,m_iDimVolumeLevel,0);
	endproc;

	export proc string GetScene()
		return m_sScene;
	endproc;

	proc bool OnClose()
		// restore volume
		CSoundMgrCln.SetVolumeRamp(CSoundMgrCln.SOUND_VOLTRACK_GLOBAL,100,m_iDimFadeMS);
		CSoundMgrCln.SetVolumeRamp(CSoundMgrCln.SOUND_VOLTRACK_3DSOUND,100,m_iDimFadeMS);
		if (m_hSoundHandle!=CSoundEventMgrClient.CSoundHandle.InvalidHandle()) then
			CGameWrap.GetSoundEventMgrClient().StopSound(m_hSoundHandle);
			m_hSoundHandle=CSoundEventMgrClient.CSoundHandle.InvalidHandle();
		endif;
		m_pxDialogSceneMgr^.OnCloseScene(this);
		return true;
	endproc;

	export proc void Tick()
		var CGameTime xCur=CTimeMgr.Get().GetTime();
		if(m_xLastTickTime!=CGameTime.GetInvalidTime())then
			if((xCur-m_xLastTickTime).GetSecondsF()<0.5f)then
				return;
			endif;
		endif;
		m_xLastTickTime=xCur;
		var ^CSoundEventMgrClient pxSMEC=^(CGameWrap.GetSoundEventMgrClient());
		m_pxTextCtrl^.SetTextColor({{255, 250, 180, 255}});
		var bool bNextFrame=(m_xCurFrameEndTime==CGameTime.GetInvalidTime()|| (xCur>m_xCurFrameEndTime));
		if(m_bPlaySound && pxSMEC^.IsValid(m_hSoundHandle))then
			bNextFrame=(!pxSMEC^.IsPlaying(m_hSoundHandle));
		endif;
		if(bNextFrame)then
			m_iCurFrame++;
			if(m_pxFramesNode!=null&&m_iCurFrame<m_pxFramesNode^.NumSubs())then
				var ^CPropDB.CNode pxCurFrame=^((m_pxFramesNode^)[m_iCurFrame]);
				var string sActor=pxCurFrame^.GetValueS("actor");
				var string sText=CLocalizer.Get().Translate("_"+m_sSceneName+"_"+pxCurFrame^.Name());
				var string sAudio=pxCurFrame^.GetValueS("audio");
				var ^CActor pxActor=GetActor(sActor);
				var string sActorName="";
				var CClntHndl xActorHndl;
				var string sDefIcon;
				if(pxActor!=null)then
					sActorName=CLocalizer.Get().Translate("_ds_ACTOR_"+pxActor^.m_sName);
					xActorHndl=pxActor^.m_xObj;
					sDefIcon=pxActor^.m_sDefIcon;
				endif;
				var bool bShowScene=true;
				var ^CLevelInfo pxLevelInfo=^(CGameWrap.GetClient().GetLevelInfo());
				if(pxActor^.m_sName=="Mentor" && !pxLevelInfo^.IsTutorial())then
					var CConfig xConf;
					var bool bShowMentorTexts=xConf.GetSetB("Game/GUIOptions/ShowMentorTexts",true);
					if(!bShowMentorTexts)then
						bShowScene=false;
					endif;
				endif;
				if(bShowScene)then
					m_pxActor^.SetText(sActorName+CLocalizer.Get().Translate("_NT_ACTOR_TEXT_SEPARATOR"));
					var string sIconBlend=m_pxImage^.Init(xActorHndl,sDefIcon);
					m_pxImage^.SetPos(10 * CGameInst.ms_iUIScaleFactor,10 * CGameInst.ms_iUIScaleFactor);
					var string sPre=".";
					var int i=sActorName.GetLength()+2;
					while(i-->=0) do
						sPre+=" ";
					endwhile;
					m_pxTextCtrl^.SetText(sPre+sText);
					var real fDuration=0.0f;
					begin calc_vokale;
						var int iNumVok=0;
						var string sLowerText=sText;
						sLowerText.MakeLower();
						var char cLastLetter;
						var int i,iC=sLowerText.GetLength();
						for(i=0)cond(i<iC)iter(i++)do
							var char cLetter=sLowerText.GetAt(i);
							if(cLetter=='a'||cLetter=='e'||cLetter=='i'||cLetter=='o'||cLetter=='u')then
								if(cLetter!=cLastLetter)then
									cLastLetter=cLetter;
									iNumVok++;
								endif;
							endif;
						endfor;
						fDuration=iNumVok.ToReal()*0.25f;
					end calc_vokale;
					//m_xWMAPlayer.Init();
					if(m_bPlaySound)then
						pxSMEC^.StopSound(m_hSoundHandle);
						// calc volume ( VolTrack_Main * VolTrack_Speech )
						/*
						var real fOggVol=(CSoundMgrCln.GetMainVolume()*CSoundMgrCln.GetVolume(CSoundMgrCln.SOUND_VOLTRACK_CUTSCENE)).ToReal();
						fOggVol=fOggVol/10000.0;
						if (fOggVol<0.0) then fOggVol=0.0; elseif (fOggVol>1.0) then fOggVol=1.0f; endif;
						m_xOggPlayer.SetVolume(fOggVol);
						*/
						
//						if ( sAudio.IsEmpty() ) then
//							KLog.LogWarn( "DaHo", "Scene '" + m_sSceneName + "' is not complete" );
//							KLog.LogWarn( "DaHo", "-> sActor = '" + sActor + "'" );
//							KLog.LogWarn( "DaHo", "-> sAudio = '" + sAudio + "'" );
//							KLog.LogWarn( "DaHo", "-> sText  = '" + sText  + "'" );
//						endif;
						
						m_hSoundHandle=pxSMEC^.PlayGlobalSound(sAudio,CSoundMgrCln.SOUND_VOLTRACK_CUTSCENE,2);
						var CGameTimeSpan xSampleLength=pxSMEC^.GetSampleLengthMS(m_hSoundHandle);
						if(xSampleLength.GetSecondsF()>fDuration)then
							fDuration=xSampleLength.GetSecondsF();
						endif;
					endif;
					var int iScrH = CClientWrap.GetDesktop()^.GetHeight();
					SetPos(209 * CGameInst.ms_iUIScaleFactor, iScrH-(195 * CGameInst.ms_iUIScaleFactor+GetHeight()));
					m_xCurFrameEndTime=xCur+(CGameTimeSpan.OneSecond()*fDuration);
					var vec3 vPos;
					sText="\\{color ds_actorcolor} "+sActorName+CLocalizer.Get().Translate("_NT_ACTOR_TEXT_SEPARATOR")+" \\{/color}"+sText;
					var ^CInGameScreen pxIngameScreen=CUIStateMgr.Get().GetInGameScreen();
					if(pxIngameScreen!=null)then
						if(pxActor!=null)then
							var ^CObj pxObj = pxActor^.m_xObj.GetObj();
							if(pxObj!=null)then
								vPos = pxObj^.GetPos();
							endif;
						endif;
						pxIngameScreen^.GetNewsTickerWindow()^.PushDialogScene(sText,sIconBlend,((fDuration+3.0f)*1000.0f).ToInt(),vPos);
					endif;
				endif;//Show
			else
				OnClose();
				return;
			endif;
		endif;
	endproc;

endclass;

class CActorImage inherit CButton

	var CClntHndl m_xObjHandle;
	
	export proc string Init(CClntHndl p_xObjHandle,string p_sDefIcon)
		var string sLayerSize="2";
		m_xObjHandle=p_xObjHandle;
		if(!m_xObjHandle.IsValid()) then 
			var string sBlend = sLayerSize+"";
			if(!p_sDefIcon.IsEmpty())then
				sBlend+=", layer "+p_sDefIcon;
			endif;
			sBlend+=", layer info_crdframe_clear";
			//sBlend+=",layer ovl_hpbar_bg";
			sBlend+=",layer nt_ntcard_bg";
			var ^CCardBitmap pxBitmapNormal = CGameInst.GetBitmapMgr().GetBlendBitmap( sBlend );
			SetBitmap(pxBitmapNormal^.GetBitmap(),pxBitmapNormal^.GetBitmap(),pxBitmapNormal^.GetBitmap(),pxBitmapNormal^.GetBitmap());						
			return sBlend;
		endif;
		var string sIconBlend;
		var ^CObj pxO = m_xObjHandle.GetObj();
		//var string sUnitClass = pxO^.GetClassName();
		var string sUnitClass = CHelpMenu.GetObjHelpitemKey(pxO);
		sUnitClass.MakeLower();
		if(sUnitClass.GetAt(0)=='_')then
			sUnitClass.Delete(0);
		endif;
		var ^CCardBitmap pxBitmapNormal=null;
		if (sUnitClass!="") then
			var string sBlend = sLayerSize+", layer "+sUnitClass+", layer info_crdframe_clear";
			if ( CGameInst.GetBitmapMgr().BlendSourceExists( sUnitClass )==true ) then
				pxBitmapNormal = CGameInst.GetBitmapMgr().GetBlendBitmap( sBlend );
				sIconBlend=sBlend;
				if(pxBitmapNormal==null) then
					sBlend = sLayerSize+", layer info_crdframe_clear ";
					pxBitmapNormal = CGameInst.GetBitmapMgr().GetBlendBitmap( sBlend );
					sIconBlend=sBlend;
				endif;
			else
				sBlend = sLayerSize+", layer info_crdframe_clear ";
				pxBitmapNormal = CGameInst.GetBitmapMgr().GetBlendBitmap( sBlend );
				sIconBlend=sBlend;
			endif;
		else
			var string sBlend = sLayerSize+", layer info_crdframe_clear ";
			pxBitmapNormal = CGameInst.GetBitmapMgr().GetBlendBitmap( sBlend );
			sIconBlend=sBlend;
		endif;
		//sIconBlend+=",layer ovl_hpbar_bg"+", blend ovl_hpbar_hploose 90"+", hslicehp ovl_hpbar "+100.ToString();
		/*
		var int iHPSlice=0;
		if(pxO!=null)then
			var ^CAttribs pxAttribs=pxO^.GetAttribs();
			if(pxAttribs!=null)then
				var int iHitpoints = pxAttribs^.GetValueInt("hitpoints");
				var int iMaxHitpoints = pxAttribs^.GetValueInt("maxhitpoints");
				if(iMaxHitpoints>0)then
					iHPSlice=((iHitpoints*100)/iMaxHitpoints);
				endif;
			endif;
		endif;
		*/
		//sIconBlend+=",layer ovl_hpbar_bg"+", hslicehp ovl_hpbar "+iHPSlice.ToString();
		sIconBlend+=",layer nt_ntcard_bg";
		if(pxBitmapNormal!=null)then
			SetBitmap(pxBitmapNormal^.GetBitmap(),pxBitmapNormal^.GetBitmap(),pxBitmapNormal^.GetBitmap(),pxBitmapNormal^.GetBitmap());
		endif;
		return sIconBlend;
	endproc;

	proc bool OnDoubleClick()
		var ^CObj pxObj = m_xObjHandle.GetObj();
		if(pxObj!=null)then
			CMultiCameraController.Get().SetCameraTarget(pxObj^.GetPos());
			CMultiCameraController.Get().SnapOnGround();
		endif;
		return true;
	endproc;

	proc string GetBitmapKey(string p_sClass, int p_iLevel)
		p_sClass.MakeLower();
		p_sClass.Delete(p_sClass.GetLength()-3,3);//delete _s#
		p_sClass.Replace("_m_","_");
		p_sClass.Replace("_f_","_");
		if(p_sClass.Left(3)=="hu_")then
		elseif(p_sClass.Left(4)=="aje_")then
		elseif(p_sClass.Left(7)=="ninigi_")then
		endif;
		if(p_iLevel==0)then p_iLevel=1;endif;
		return p_sClass+"_"+p_iLevel.ToString();
	endproc;
endclass;