class CMiniMapWindow2 inherit CAlphaMaskedStaticCtrl

	var ^CMiniMap	m_pxMiniMap;
	var real		m_fZoom;

//	var array CMiniMapMarker		m_axAttackMarker;

	var ^CToggleButton	m_pxResources;
	var ^CToggleButton	m_pxScape;
	var ^CButton		m_pxMapPing;
	var ^CButton		m_pxZoomIn;
	var ^CButton		m_pxZoomOut;
	
	var vec3			m_vMapPingPos;

	export constructor()
		SetBitmap("/hud/minimap_background.tga");
		SetBackground(true);

		m_pxResources=new CToggleButton;
		
		m_pxResources^.SetBitmap(	CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_res_up")^.GetBitmap(),
									CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_res_uphover")^.GetBitmap(),
									CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_res_down")^.GetBitmap(),
									CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_res_downhover")^.GetBitmap());
		m_pxResources^.SetPos(38 * CGameInst.ms_iUIScaleFactor,225 * CGameInst.ms_iUIScaleFactor);
		m_pxResources^.SetSize(30 * CGameInst.ms_iUIScaleFactor,30 * CGameInst.ms_iUIScaleFactor);
		m_pxResources^.SetFrame(false);
		m_pxResources^.SetBackground(false);
		m_pxResources^.SetTransparent(true);
		m_pxResources^.m_xOnClick=OnResources;
		AddChild(m_pxResources);

		m_pxScape=new CToggleButton;
		m_pxScape^.SetBitmap(	CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_scape_up")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_scape_uphover")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_scape_down")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_scape_downhover")^.GetBitmap());
		m_pxScape^.SetBackground(false);
		m_pxScape^.SetPos(8 * CGameInst.ms_iUIScaleFactor,225 * CGameInst.ms_iUIScaleFactor);
		m_pxScape^.SetSize(30 * CGameInst.ms_iUIScaleFactor,30 * CGameInst.ms_iUIScaleFactor);
		m_pxScape^.SetFrame(false);
		m_pxScape^.SetTransparent(true);
		m_pxScape^.m_xOnClick=OnScape;
		AddChild(m_pxScape);
		m_pxMapPing=new CButton;
		m_pxMapPing^.SetBitmap(	CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_pingall_up")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_pingall_uphover")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_pingall_down")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("8, layer cmd_btn_minmap_pingall_downhover")^.GetBitmap());
		m_pxMapPing^.SetBackground(false);
		m_pxMapPing^.SetPos(226 * CGameInst.ms_iUIScaleFactor,49 * CGameInst.ms_iUIScaleFactor);
		m_pxMapPing^.SetSize(30 * CGameInst.ms_iUIScaleFactor,30 * CGameInst.ms_iUIScaleFactor);
		m_pxMapPing^.SetFrame(false);
		m_pxMapPing^.SetTransparent(true);
		m_pxMapPing^.m_xOnClick=OnMapPing;
		AddChild(m_pxMapPing);
		m_pxZoomIn=new CButton;
		m_pxZoomIn^.SetBitmap(	CGameInst.GetBitmapMgr().GetBlendBitmap("15, layer cmd_btn_minmap_zoomin_std")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("15, layer cmd_btn_minmap_zoomin_act")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("15, layer cmd_btn_minmap_zoomin_hov")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("15, layer cmd_btn_minmap_zoomin_dis")^.GetBitmap());
		m_pxZoomIn^.SetSize(42 * CGameInst.ms_iUIScaleFactor,21 * CGameInst.ms_iUIScaleFactor);
		m_pxZoomIn^.SetFrame(false);
		m_pxZoomIn^.SetBackground(false);
		m_pxZoomIn^.SetPos(219 * CGameInst.ms_iUIScaleFactor,219 * CGameInst.ms_iUIScaleFactor);
		m_pxZoomIn^.SetTransparent(true);
		m_pxZoomIn^.m_xOnClick=OnZoomIn;
		AddChild(m_pxZoomIn);
		m_pxZoomOut=new CButton;
		m_pxZoomOut^.SetBitmap(	CGameInst.GetBitmapMgr().GetBlendBitmap("15, layer cmd_btn_minmap_zoomout_std")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("15, layer cmd_btn_minmap_zoomout_act")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("15, layer cmd_btn_minmap_zoomout_hov")^.GetBitmap(),
								CGameInst.GetBitmapMgr().GetBlendBitmap("15, layer cmd_btn_minmap_zoomout_dis")^.GetBitmap());
		m_pxZoomOut^.SetPos(219 * CGameInst.ms_iUIScaleFactor,240 * CGameInst.ms_iUIScaleFactor);
		m_pxZoomOut^.SetSize(42 * CGameInst.ms_iUIScaleFactor,21 * CGameInst.ms_iUIScaleFactor);
		m_pxZoomOut^.SetFrame(false);
		m_pxZoomOut^.SetBackground(false);
		m_pxZoomOut^.SetTransparent(true);
		m_pxZoomOut^.m_xOnClick=OnZoomOut;
		AddChild(m_pxZoomOut);
		SetAlwaysOnTop(true);
		
		begin SetToolTips;
			var string sTTText;
			var string sTTTitle;
			sTTText=CClientWrap.GetUIMgr().GetToopTipText("mm_show_resources", sTTTitle);
			m_pxResources^.SetToolTipText(sTTTitle, sTTText);
			
			sTTTitle="";
			sTTText=CClientWrap.GetUIMgr().GetToopTipText("mm_show_landscape", sTTTitle);
			m_pxScape^.SetToolTipText(sTTTitle, sTTText);
			
			sTTTitle="";
			sTTText=CClientWrap.GetUIMgr().GetToopTipText("mm_show_mapping", sTTTitle);
			m_pxMapPing^.SetToolTipText(sTTTitle, sTTText);
			
			sTTTitle="";
			sTTText=CClientWrap.GetUIMgr().GetToopTipText("mm_zoom_in", sTTTitle);
			m_pxZoomIn^.SetToolTipText(sTTTitle, sTTText);
			
			sTTTitle="";
			sTTText=CClientWrap.GetUIMgr().GetToopTipText("mm_zoom_out", sTTTitle);
			m_pxZoomOut^.SetToolTipText(sTTTitle, sTTText);
		end SetToolTips;

//		m_axAttackMarker = 50;
	endconstructor;

	export destructor()
		if(m_pxMiniMap!=null)then
			m_pxMiniMap^.RemoveFromParent();
		endif;
	enddestructor;


	proc bool OnResources() //switches Ressources and forest/trees
		var ^CToggleButton pxBtn = m_pxResources;
		var bitset dwLayers = m_pxMiniMap^.GetEnabledLayers();
		if(pxBtn^.GetToggleButtonState())then
			dwLayers = dwLayers|CMiniMap.LT_Resources;
			dwLayers = dwLayers|CMiniMap.LT_Forest;
		else
			dwLayers = dwLayers&(~CMiniMap.LT_Resources);
			dwLayers = dwLayers&(~CMiniMap.LT_Forest);
		endif:
		m_pxMiniMap^.EnableLayers(dwLayers);
		return true;
	endproc;

	proc bool OnScape() //switches scape
		var ^CToggleButton pxBtn = m_pxScape;
		var bitset dwLayers = m_pxMiniMap^.GetEnabledLayers();
		if(pxBtn^.GetToggleButtonState())then
			dwLayers = dwLayers|CMiniMap.LT_Scape;
		else
			dwLayers = dwLayers&(~CMiniMap.LT_Scape);
		endif:
		m_pxMiniMap^.EnableLayers(dwLayers);
		return true;
	endproc;

	proc bool OnMapPing() // switch map ping
		var ^CSecondaryInputController pxSecInp = ^(CMainController.Get().GetSecInputCtrl());
		CMainController.Get().SetSecondaryInputController(true);
		if(pxSecInp!=null) then
			pxSecInp^.SetCommand("MapPing");
			pxSecInp^.SetNoneObjPath("MapPing");
		endif;
		return true;
	endproc;
	
	export proc bool OnMiniMapMouseEvent(vec3 p_vPos, bitset p_dwMouseButtons, bitset p_dwKeyModifiers)
		var ^CSecondaryInputController pxSecInp = ^(CMainController.Get().GetSecInputCtrl());
		if(pxSecInp!=null) then
			if(pxSecInp^.GetCommand() != "MapPing" || !CMainController.Get().GetSecondaryInputController()) then return false; endif;
		endif;
		var bool bStrg = (p_dwKeyModifiers & Msg.KM_CONTROL) !=0d;
		var bool bAlt = (p_dwKeyModifiers & Msg.KM_ALT) !=0d;
		var bool bShift = (p_dwKeyModifiers & Msg.KM_SHIFT) !=0d;
		var bool bLMB = (p_dwMouseButtons & CMiniMap.MB_Left) != 0d;
		var bool bLMBUp = (p_dwMouseButtons & CMiniMap.MB_LeftUp) != 0d;
		var bool bRMBUp = (p_dwMouseButtons & CMiniMap.MB_RightUp) != 0d;
		
		if(bLMB)then
			return true;
		endif;

		if(bLMBUp)then
			SetMapPing(p_vPos);
		endif;

		if(bRMBUp || bLMBUp) then
			CMainController.Get().SetSecondaryInputController(false);
		endif;

		return true;
	endproc;
	
	export proc void SetMapPing(vec3 p_vMapPingPos)
		CGameWrap.SendMapPing(p_vMapPingPos);
	endproc;

	proc bool OnZoomIn()
		m_fZoom = Math.Clamp(m_fZoom+1.0,1.0,7.0);
		m_pxMiniMap^.SetZoomFactor( m_fZoom );
		return true;
	endproc;

	proc bool OnZoomOut()
		m_fZoom = Math.Clamp(m_fZoom-1.0,1.0,7.0);
		m_pxMiniMap^.SetZoomFactor( m_fZoom );
		return true;
	endproc;

	export proc void SetMiniMap(^CMiniMap p_pxMiniMap)
		m_pxMiniMap = p_pxMiniMap;
		m_pxMiniMap^.EnableLayers(CMiniMap.LT_All);
		//m_pxMapPing^.SetToggleButtonState(true);
		m_pxResources^.SetToggleButtonState(true);
		m_pxScape^.SetToggleButtonState(true);
	endproc;

	export proc void AddEvent(vec3 p_vPos, string p_sType)
		AddEvent(p_vPos, p_sType, false, false, "", 0, 0, 0);
	endproc;

	///RemoveMarker
	///set all markers with the given string-ID inactive 
	///(there could be more than one marker with the same ID in the case of two markers, 
	///which are logicaly combined to one marker)
	export proc void RemoveMarker(string p_sID)
		m_pxMiniMap^.DestroyMarkerByID(p_sID);
		/*
		var int i, iC = m_axAttackMarker.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			if(m_axAttackMarker[i].GetID() != p_sID)then
				continue;
			endif;
			m_axAttackMarker[i].SetActive(false);
		endfor;
		*/
	endproc;

	export proc void AddEvent(vec3 p_vPos, string p_sType, bool p_bExtended, bool p_bAdd, string p_sID, int p_iTimeToLife, int p_iNumRepeats, int p_iMSBetween)
		if((p_bExtended == true) && (p_bAdd == false))then
			//L KLog.LogInfo("CaOr","Minimap: Remove "+p_sID);
			RemoveMarker(p_sID);
			return;
		endif;
		//L KLog.LogInfo("CaOr","Minimap: Add "+p_sID);
		if(p_iMSBetween <= 0)then
			p_iMSBetween = 1;
		endif;
		//	NewMarker(vec3& p_krvPos, KColor p_kxColor, size, abssize, p_fTimeToLive, p_fFrequency, p_bVisible=true, p_bActive=false, p_pkcID);
		if(p_sType=="Attack")then
			m_pxMiniMap^.NewMarkerReuse(p_sID,p_vPos,{{255,0,0,255}},80.0 * CGameInst.ms_iUIScaleFactor.ToReal(),false,3.2,1.3,true,true);
		elseif(p_sType=="Cannon")then
			m_pxMiniMap^.NewMarkerReuse(p_sID,p_vPos,{{255,106,0,255}},80.0 * CGameInst.ms_iUIScaleFactor.ToReal(),false,8.0,0.9,true,true);
		elseif(p_sType=="Finished")then
			m_pxMiniMap^.NewMarkerReuse(p_sID,p_vPos,{{100,100,255,255}},100.0 * CGameInst.ms_iUIScaleFactor.ToReal(),false,1.2,0.7,true,true);
		elseif(p_sType=="AIHelp")then
			m_pxMiniMap^.NewMarker(p_sID,p_vPos,{{255,255,255,255}},100.0 * CGameInst.ms_iUIScaleFactor.ToReal(),true,1.2,0.7,true,true);
		elseif(p_sType=="SPMainQuest")then
			m_pxMiniMap^.NewMarker(p_sID,p_vPos,{{255,200,100,255}},100.0 * CGameInst.ms_iUIScaleFactor.ToReal(),true,1.2,0.7,true,true);
		elseif(p_sType=="SPOptQuest")then
			m_pxMiniMap^.NewMarker(p_sID,p_vPos,{{200,200,200,255}},100.0 * CGameInst.ms_iUIScaleFactor.ToReal(),true,1.2,0.7,true,true);
		elseif(p_sType=="SPHint")then
			m_pxMiniMap^.NewMarker(p_sID,p_vPos,{{0,120,0,255}},100.0 * CGameInst.ms_iUIScaleFactor.ToReal(),true,1.2,0.7,true,true);
		elseif(p_sType.Left(7)=="Reveal_")then
			p_sType.Delete(0,7);
			var int iOwner=p_sType.ToInt();
			var color xPingColor={{255,255,255,255}};
			if(iOwner>=0 && iOwner<=7)then
				var ^CLevelInfoClient pxLevelInfo=^(CGameWrap.GetClient().GetLevelInfo());
				xPingColor=pxLevelInfo^.GetPlayerColor(iOwner);
			endif;
			m_pxMiniMap^.NewMarkerReuse(p_sID,p_vPos,xPingColor,50.0 * CGameInst.ms_iUIScaleFactor.ToReal(),false,10.0,1.5,true,true);
		elseif(p_sType.Left(9)=="DoflCapt_")then
			p_sType.Delete(0,9);
			var int iOwner=p_sType.ToInt();
			var color xPingColor={{200,200,200,255}};
			if(iOwner>=0 && iOwner<=7)then
				var ^CLevelInfoClient pxLevelInfo=^(CGameWrap.GetClient().GetLevelInfo());
				xPingColor=pxLevelInfo^.GetPlayerColor(iOwner);
			endif;
			m_pxMiniMap^.NewMarker(p_sID,p_vPos,xPingColor,100.0 * CGameInst.ms_iUIScaleFactor.ToReal(),false,3.2,0.7,true,true);
		elseif(p_sType.Left(10)=="FixedColor")then
			var color xPingColor={{255,0,0,255}};
			var array string asData;
			p_sType.Split(asData,":",false);
			if(asData.NumEntries()==4)then
				xPingColor.SetRed(asData[1].ToInt());
				xPingColor.SetGreen(asData[2].ToInt());
				xPingColor.SetBlue(asData[3].ToInt());
			endif;
			m_pxMiniMap^.NewMarker(p_sID,p_vPos,xPingColor,100.0 * CGameInst.ms_iUIScaleFactor.ToReal(),true,11.2,0.7,true,true);
		endif;
	endproc;

endclass;
/*
// -- Mini Map Marker
class CGenericMiniMapMarker
	var ^CMiniMap m_pxMiniMap;
	var ^CMiniMapMarkerInt m_pxMarker;

	export constructor()
	endconstructor;

	export destructor()
	enddestructor;

	export proc bool Create()
		if(m_pxMiniMap==null)then return false; endif;
		if(m_pxMarker!=null)then
			Destroy();
		endif;
		m_pxMarker=m_pxMiniMap^.NewMarker({0.0,0.0,0.0},{{0,0,0,255}},-1.0,0.0,true,false);
		return(m_pxMarker!=null);
	endproc;

	export proc bool Destroy()
		if(m_pxMiniMap==null)then return false; endif;
		m_pxMiniMap^.DestroyMarker(m_pxMarker);
		m_pxMarker=null;
		return true;
	endproc;

	export proc void SetPos(vec3 p_vPos)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetPos(p_vPos);
	endproc;

	export proc vec3 GetPos()
		if(m_pxMarker==null)then return {0.0,0.0,0.0}; endif;
		return m_pxMarker^.GetPos();
	endproc;

	export proc void SetShape(int p_iShape)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetShape(p_iShape);
	endproc;

	export proc int GetShape()
		if(m_pxMarker==null)then return 0; endif;
		return m_pxMarker^.GetShape();
	endproc;

	export proc vec3 GetPosOnMap()
		if(m_pxMarker==null)then return {0.0,0.0,0.0}; endif;
		return m_pxMarker^.GetPosOnMap();
	endproc;

	export proc void SetColor(color p_xColor)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetColor(p_xColor);
	endproc;

	export proc color GetColor()
		if(m_pxMarker==null)then return {{0,0,0,0}}; endif;
		return m_pxMarker^.GetColor();
	endproc;

	export proc void SetSize(real p_fSize)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetSize(p_fSize);
	endproc;

	export proc real GetSize()
		if(m_pxMarker==null)then return 0.0; endif;
		return m_pxMarker^.GetSize();
	endproc;

	export proc real GetSizeOnMap()
		if(m_pxMarker==null)then return 0.0; endif;
		return m_pxMarker^.GetSizeOnMap();
	endproc;

	export proc void SetAbsoluteSize(bool p_bAbsoluteSize)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetAbsoluteSize(p_bAbsoluteSize);
	endproc;

	export proc bool GetAbsoluteSize()
		if(m_pxMarker==null)then return false; endif;
		return m_pxMarker^.GetAbsoluteSize();
	endproc;

	export proc void SetFrequency(real p_fFrequency)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetFrequency(p_fFrequency);
	endproc;

	export proc real GetFrequency()
		if(m_pxMarker==null)then return 0.0; endif;
		return m_pxMarker^.GetFrequency();
	endproc;

	export proc void SetTimeToLive(real p_fTTL)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetTimeToLive(p_fTTL);
	endproc;

	export proc real GetTimeToLive()
		if(m_pxMarker==null)then return 0.0; endif;
		return m_pxMarker^.GetTimeToLive();
	endproc;

	export proc void SetVisible(bool p_bVis)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetVisible(p_bVis);
	endproc;

	export proc bool GetVisible()
		if(m_pxMarker==null)then return false; endif;
		return m_pxMarker^.GetVisible();
	endproc;

	export proc void SetActive(bool p_bAct)
		if(m_pxMarker==null)then return; endif;
		m_pxMarker^.SetActive(p_bAct);
	endproc;

	export proc bool GetActive()
		if(m_pxMarker==null)then return false; endif;
		return m_pxMarker^.GetActive();
	endproc;

	// useful helper functions
	export proc bool FadeOut()
		if(m_pxMarker==null)then return false; endif;
		var real fTTL=m_pxMarker^.GetTimeToLive();
		if(fTTL>1.0)then
			m_pxMarker^.SetTimeToLive(1.0);
		endif;
		m_pxMarker^.SetActive(true);
		return true;
	endproc;

	export proc bool WindUp(real p_fTimeToLive)
		if(m_pxMarker==null)then return false; endif;
		m_pxMarker^.SetTimeToLive(p_fTimeToLive);
		m_pxMarker^.SetActive(true);
		return true;
	endproc;
endclass;

// implementation of MiniMapMarker that uses the MiniMap3d
// (game mini map)
class CMiniMapMarker inherit CGenericMiniMapMarker
	export constructor()
		m_pxMiniMap=^(CClientWrap.GetUIMgr().GetMiniMap());
		Create();
	endconstructor;
	export destructor()
		Destroy();
		m_pxMiniMap=null;
	enddestructor;
endclass;
*/
/*
// implementation of MiniMapMarker that uses the MiniMap2d
// (game mini map)
class CMiniMap2dMarker inherit CGenericMiniMapMarker
	export constructor()
		m_pxMiniMap=CClientWrap.GetUIMgr().GetMiniMap2d();
		Create();
	endconstructor;
	export destructor()
		Destroy();
		m_pxMiniMap=null;
	enddestructor;
endclass;
*/
